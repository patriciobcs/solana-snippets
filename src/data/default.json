{
  "id": 1,
  "parentId": -1,
  "lastId": 111,
  "type": 0,
  "label": "snippets",
  "children": [
    {
      "id": 2,
      "parentId": 1,
      "type": 1,
      "label": "Solana",
      "children": [
        {
          "id": 3,
          "parentId": 2,
          "type": 1,
          "label": "Native",
          "children": [
            {
              "id": 4,
              "parentId": 3,
              "type": 1,
              "label": "Token",
              "children": [
                {
                  "requires": [
                    "solana_program::program::invoke",
                    "spl_token::instruction::burn"
                  ],
                  "description": "Burn tokens using the Token Program",
                  "content": [
                    "invoke(",
                    "    &burn(",
                    "        &spl_token::ID,",
                    "        ${1:token}_info.key,",
                    "        ${2:mint}_info.key,",
                    "        ${3:authority}_info.key,",
                    "        &[],",
                    "        ${4:amount},",
                    "    )?,",
                    "    &[",
                    "        ${1:token}_info.clone(),",
                    "        ${2:mint}_info.clone(),",
                    "        ${3:authority}_info.clone(),",
                    "    ],",
                    ")?;"
                  ],
                  "label": "Burn Tokens",
                  "type": 3,
                  "children": [],
                  "parentId": 4,
                  "id": 5
                },
                {
                  "requires": [
                    "solana_program::program::invoke",
                    "spl_token::instruction::initialize_account"
                  ],
                  "description": "Initialize an associated token account using the Token Program",
                  "content": [
                    "invoke(",
                    "    &initialize_account(",
                    "        &spl_token::ID,",
                    "        ${1:token}_info.key,",
                    "        ${2:mint}_info.key,",
                    "        ${3:authority}_info.key,",
                    "    )?,",
                    "    &[",
                    "        ${1:token}_info.clone(),",
                    "        ${2:mint}_info.clone(),",
                    "        ${3:authority}_info.clone(),",
                    "        ${4:rent}_info.clone(),",
                    "    ],",
                    ")?;"
                  ],
                  "label": "Init Associated Token Account",
                  "type": 3,
                  "children": [],
                  "parentId": 4,
                  "id": 6
                },
                {
                  "requires": [
                    "solana_program::program::invoke",
                    "spl_token::instruction::revoke"
                  ],
                  "description": "Revoke the delegation of any tokens using the Token Program",
                  "content": [
                    "invoke(",
                    "    &revoke(",
                    "        &spl_token::ID,",
                    "        ${1:token}_info.key,",
                    "        ${2:authority}_info.key,",
                    "        &[],",
                    "    )?,",
                    "    &[",
                    "        ${1:token}_info.clone(),",
                    "        ${2:authority}_info.clone(),",
                    "    ],",
                    ")?;"
                  ],
                  "label": "Revoke Tokens Delegation",
                  "type": 3,
                  "children": [],
                  "parentId": 4,
                  "id": 7
                },
                {
                  "requires": [
                    "solana_program::program::invoke",
                    "spl_token::instruction::transfer"
                  ],
                  "description": "Transfer tokens using the Token Program",
                  "content": [
                    "invoke(",
                    "    &transfer(",
                    "        &spl_token::ID,",
                    "        ${1:sender}_info.key,",
                    "        ${2:receiver}_info.key,",
                    "        ${3:authority}_info.key,",
                    "        &[],",
                    "        ${4:amount},",
                    "    )?,",
                    "    &[",
                    "        ${1:sender}_info.clone(),",
                    "        ${2:receiver}_info.clone(),",
                    "        ${3:authority}_info.clone(),",
                    "    ],",
                    ")?;"
                  ],
                  "label": "Transfer Tokens",
                  "type": 3,
                  "children": [],
                  "parentId": 4,
                  "id": 8
                },
                {
                  "requires": [
                    "solana_program::program::invoke",
                    "spl_token::instruction::approve"
                  ],
                  "description": "Delegate tokens using the Token Program",
                  "content": [
                    "invoke(",
                    "    &approve(",
                    "        &spl_token::ID,",
                    "        ${1:token}_info.key,",
                    "        ${2:delegate}_info.key,",
                    "        ${3:authority}_info.key,",
                    "        &[],",
                    "        ${4:amount},",
                    "    )?,",
                    "    &[",
                    "        ${1:token}_info.clone(),",
                    "        ${2:delegate}_info.clone(),",
                    "        ${3:authority}_info.clone(),",
                    "    ],",
                    ")?;"
                  ],
                  "label": "Delegate Tokens",
                  "type": 3,
                  "children": [],
                  "parentId": 4,
                  "id": 9
                }
              ]
            },
            {
              "id": 10,
              "parentId": 3,
              "type": 1,
              "label": "System",
              "children": [
                {
                  "requires": [
                    "solana_program::sysvar::clock::Clock",
                    "solana_program::sysvar::Sysvar"
                  ],
                  "description": "Gets the Clock Sysvar",
                  "content": [
                    "let ${1:clock} = Clock::get()?;"
                  ],
                  "label": "Get Clock Sysvar",
                  "type": 3,
                  "children": [],
                  "parentId": 10,
                  "id": 11
                },
                {
                  "requires": [
                    "solana_program::account_info::next_account_info"
                  ],
                  "description": "Get next account in the accounts iterator",
                  "content": [
                    "let ${1:account}_info = next_account_info(account_info_iter)?;"
                  ],
                  "label": "Get Account",
                  "type": 3,
                  "children": [],
                  "parentId": 10,
                  "id": 12
                },
                {
                  "requires": [
                    "solana_program::program::invoke",
                    "solana_program::system_instruction::transfer"
                  ],
                  "description": "Transfer native SOL using System Program",
                  "content": [
                    "invoke(",
                    "    &transfer(${1:sender}_info.key, ${2:receiver}_info.key, ${3:amount}),",
                    "    &[",
                    "        ${1:sender}_info.clone(),",
                    "        ${2:receiver}_info.clone(),",
                    "        ${4:system_program}_info.clone(),",
                    "    ],",
                    ")?;"
                  ],
                  "label": "Transfer Native SOL",
                  "type": 3,
                  "children": [],
                  "parentId": 10,
                  "id": 13
                },
                {
                  "requires": [
                    "solana_program::sysvar::rent::Rent",
                    "solana_program::sysvar::Sysvar"
                  ],
                  "description": "Gets the Rent Sysvar",
                  "content": [
                    "let ${1:rent} = Rent::get()?;"
                  ],
                  "label": "Get Rent Sysvar",
                  "type": 3,
                  "children": [],
                  "parentId": 10,
                  "id": 14
                },
                {
                  "requires": [
                    "crate::state::__Account__",
                    "solana_program::account_info::next_account_info",
                    "solana_program::program_pack::Pack"
                  ],
                  "description": "Unpacks an Account Info",
                  "content": [
                    "let mut ${1:account} = ${2:Account}::unpack(&${1:account}_info.data.borrow())?;"
                  ],
                  "label": "Unpack Account",
                  "type": 3,
                  "children": [],
                  "parentId": 10,
                  "id": 15
                },
                {
                  "requires": [
                    "crate::state::__Account__",
                    "solana_program::program_error::ProgramError",
                    "solana_program::program_pack::Pack",
                    "solana_program::sysvar::Sysvar"
                  ],
                  "description": "Check if an account is rent exempt",
                  "content": [
                    "if !rent.is_exempt(${1:account}_info.lamports(), ${2:Account}::LEN) {",
                    "    return Err(ProgramError::InvalidAccountData.into());",
                    "}"
                  ],
                  "label": "Check Rent Exempt",
                  "type": 3,
                  "children": [],
                  "parentId": 10,
                  "id": 16
                },
                {
                  "requires": [
                    "solana_program::account_info::next_account_info"
                  ],
                  "description": "Start iterator to get accounts of instruction",
                  "content": [
                    "let account_info_iter = &mut accounts.iter();",
                    "let ${1:account}_info = next_account_info(account_info_iter)?;"
                  ],
                  "label": "Get Accounts Iterator",
                  "type": 3,
                  "children": [],
                  "parentId": 10,
                  "id": 17
                }
              ]
            }
          ]
        },
        {
          "id": 18,
          "parentId": 2,
          "type": 1,
          "label": "Anchor",
          "children": [
            {
              "id": 19,
              "parentId": 18,
              "type": 1,
              "label": "System",
              "children": [
                {
                  "requires": [],
                  "description": "Get the bump of an account",
                  "content": [
                    "${1:pda}.bump = *ctx.bumps.get(\"${1:pda}\").unwrap();"
                  ],
                  "label": "Get Bump",
                  "type": 3,
                  "children": [],
                  "parentId": 19,
                  "id": 20
                },
                {
                  "requires": [],
                  "description": "Creates a basic program entrypoint",
                  "content": [
                    "use anchor_lang::prelude::*;",
                    "",
                    "#[program]",
                    "pub mod anchor {",
                    "pub use super::*;",
                    "",
                    "pub fn ${1:instruction}(ctx: Context<${2:Instruction}>) -> Result<()> {",
                    "    instructions::${1:instruction}::processor(ctx)",
                    "}",
                    "}"
                  ],
                  "label": "Program",
                  "type": 2,
                  "children": [],
                  "parentId": 19,
                  "id": 21
                }
              ]
            },
            {
              "id": 22,
              "parentId": 18,
              "type": 1,
              "label": "Interfaces",
              "children": [
                {
                  "requires": [],
                  "description": "Creates the interface instruction `route` of the `Jupiter` program",
                  "content": [
                    "#[derive(Accounts)]",
                    "pub struct Route<'info> {",
                    "  pub token_program: AccountInfo<'info>,",
                    "  #[account(signer)]",
                    "  pub user_transfer_authority: AccountInfo<'info>,",
                    "  pub destination_token_account: AccountInfo<'info>,",
                    "}",
                    ""
                  ],
                  "label": "Jupiter's Instruction Route",
                  "type": 2,
                  "children": [],
                  "parentId": 22,
                  "id": 23
                },
                {
                  "requires": [],
                  "description": "Creates the interface instruction `whirlpoolSwapExactOutput` of the `Jupiter` program",
                  "content": [
                    "#[derive(Accounts)]",
                    "pub struct WhirlpoolSwapExactOutput<'info> {",
                    "  pub swap_program: AccountInfo<'info>,",
                    "  pub token_program: AccountInfo<'info>,",
                    "  #[account(signer)]",
                    "  pub token_authority: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub whirlpool: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub token_owner_account_a: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub token_vault_a: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub token_owner_account_b: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub token_vault_b: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub tick_array0: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub tick_array1: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub tick_array2: AccountInfo<'info>,",
                    "  pub oracle: AccountInfo<'info>,",
                    "}",
                    ""
                  ],
                  "label": "Jupiter's Instruction WhirlpoolSwapExactOutput",
                  "type": 2,
                  "children": [],
                  "parentId": 22,
                  "id": 24
                },
                {
                  "requires": [],
                  "description": "Creates the interface instruction `createOpenOrders` of the `Jupiter` program",
                  "content": [
                    "#[derive(Accounts)]",
                    "pub struct CreateOpenOrders<'info> {",
                    "  #[account(mut)]",
                    "  pub open_orders: AccountInfo<'info>,",
                    "  #[account(mut, signer)]",
                    "  pub payer: AccountInfo<'info>,",
                    "  pub dex_program: AccountInfo<'info>,",
                    "  pub system_program: AccountInfo<'info>,",
                    "  pub rent: AccountInfo<'info>,",
                    "  pub market: AccountInfo<'info>,",
                    "}",
                    ""
                  ],
                  "label": "Jupiter's Instruction CreateOpenOrders",
                  "type": 2,
                  "children": [],
                  "parentId": 22,
                  "id": 25
                },
                {
                  "requires": [],
                  "description": "Creates the interface instruction `mercurialSwap` of the `Jupiter` program",
                  "content": [
                    "#[derive(Accounts)]",
                    "pub struct MercurialSwap<'info> {",
                    "  pub swap_program: AccountInfo<'info>,",
                    "  pub swap_state: AccountInfo<'info>,",
                    "  pub token_program: AccountInfo<'info>,",
                    "  pub pool_authority: AccountInfo<'info>,",
                    "  #[account(signer)]",
                    "  pub user_transfer_authority: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub source_token_account: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub destination_token_account: AccountInfo<'info>,",
                    "}",
                    ""
                  ],
                  "label": "Jupiter's Instruction MercurialSwap",
                  "type": 2,
                  "children": [],
                  "parentId": 22,
                  "id": 26
                },
                {
                  "requires": [],
                  "description": "Creates the interface instruction `cykuraSwap` of the `Jupiter` program",
                  "content": [
                    "#[derive(Accounts)]",
                    "pub struct CykuraSwap<'info> {",
                    "  pub swap_program: AccountInfo<'info>,",
                    "  #[account(signer)]",
                    "  pub signer: AccountInfo<'info>,",
                    "  pub factory_state: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub pool_state: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub input_token_account: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub output_token_account: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub input_vault: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub output_vault: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub last_observation_state: AccountInfo<'info>,",
                    "  pub core_program: AccountInfo<'info>,",
                    "  pub token_program: AccountInfo<'info>,",
                    "}",
                    ""
                  ],
                  "label": "Jupiter's Instruction CykuraSwap",
                  "type": 2,
                  "children": [],
                  "parentId": 22,
                  "id": 27
                },
                {
                  "requires": [],
                  "description": "Creates the interface instruction `serumSwap` of the `Jupiter` program",
                  "content": [
                    "#[derive(Accounts)]",
                    "pub struct MarketSerumSwap<'info> {",
                    "  #[account(mut)]",
                    "  pub market: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub open_orders: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub request_queue: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub event_queue: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub bids: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub asks: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub coin_vault: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub pc_vault: AccountInfo<'info>,",
                    "  pub vault_signer: AccountInfo<'info>,",
                    "}",
                    "",
                    "#[derive(Accounts)]",
                    "pub struct SerumSwap<'info> {",
                    "  pub market_serum_swap: MarketSerumSwap<'info>,",
                    "  #[account(signer)]",
                    "  pub authority: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub order_payer_token_account: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub coin_wallet: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub pc_wallet: AccountInfo<'info>,",
                    "  pub dex_program: AccountInfo<'info>,",
                    "  pub token_program: AccountInfo<'info>,",
                    "  pub rent: AccountInfo<'info>,",
                    "}",
                    ""
                  ],
                  "label": "Jupiter's Instruction SerumSwap",
                  "type": 2,
                  "children": [],
                  "parentId": 22,
                  "id": 28
                },
                {
                  "requires": [],
                  "description": "Creates the interface instruction `saberSwap` of the `Jupiter` program",
                  "content": [
                    "#[derive(Accounts)]",
                    "pub struct SaberSwap<'info> {",
                    "  pub swap_program: AccountInfo<'info>,",
                    "  pub token_program: AccountInfo<'info>,",
                    "  pub swap: AccountInfo<'info>,",
                    "  pub swap_authority: AccountInfo<'info>,",
                    "  pub user_authority: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub input_user_account: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub input_token_account: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub output_user_account: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub output_token_account: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub fees_token_account: AccountInfo<'info>,",
                    "}",
                    ""
                  ],
                  "label": "Jupiter's Instruction SaberSwap",
                  "type": 2,
                  "children": [],
                  "parentId": 22,
                  "id": 29
                },
                {
                  "requires": [],
                  "description": "Creates the interface instruction `saberAddDecimals` of the `Jupiter` program",
                  "content": [
                    "#[derive(Accounts)]",
                    "pub struct SaberAddDecimals<'info> {",
                    "  pub add_decimals_program: AccountInfo<'info>,",
                    "  pub wrapper: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub wrapper_mint: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub wrapper_underlying_tokens: AccountInfo<'info>,",
                    "  #[account(signer)]",
                    "  pub owner: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub user_underlying_tokens: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub user_wrapped_tokens: AccountInfo<'info>,",
                    "  pub token_program: AccountInfo<'info>,",
                    "}",
                    ""
                  ],
                  "label": "Jupiter's Instruction SaberAddDecimals",
                  "type": 2,
                  "children": [],
                  "parentId": 22,
                  "id": 30
                },
                {
                  "requires": [],
                  "description": "Creates the interface instruction `tokenSwap` of the `Jupiter` program",
                  "content": [
                    "#[derive(Accounts)]",
                    "pub struct TokenSwap<'info> {",
                    "  pub token_swap_program: AccountInfo<'info>,",
                    "  pub token_program: AccountInfo<'info>,",
                    "  pub swap: AccountInfo<'info>,",
                    "  pub authority: AccountInfo<'info>,",
                    "  #[account(signer)]",
                    "  pub user_transfer_authority: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub source: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub swap_source: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub swap_destination: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub destination: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub pool_mint: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub pool_fee: AccountInfo<'info>,",
                    "}",
                    ""
                  ],
                  "label": "Jupiter's Instruction TokenSwap",
                  "type": 2,
                  "children": [],
                  "parentId": 22,
                  "id": 31
                },
                {
                  "requires": [],
                  "description": "Creates the interface instruction `senchaSwap` of the `Jupiter` program",
                  "content": [
                    "#[derive(Accounts)]",
                    "pub struct SenchaSwap<'info> {",
                    "  pub swap_program: AccountInfo<'info>,",
                    "  pub token_program: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub swap: AccountInfo<'info>,",
                    "  pub user_authority: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub input_user_account: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub input_token_account: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub input_fees_account: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub output_user_account: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub output_token_account: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub output_fees_account: AccountInfo<'info>,",
                    "}",
                    ""
                  ],
                  "label": "Jupiter's Instruction SenchaSwap",
                  "type": 2,
                  "children": [],
                  "parentId": 22,
                  "id": 32
                },
                {
                  "requires": [],
                  "description": "Creates the interface instruction `stepSwap` of the `Jupiter` program",
                  "content": [
                    "#[derive(Accounts)]",
                    "pub struct StepSwap<'info> {",
                    "  pub token_swap_program: AccountInfo<'info>,",
                    "  pub token_program: AccountInfo<'info>,",
                    "  pub swap: AccountInfo<'info>,",
                    "  pub authority: AccountInfo<'info>,",
                    "  #[account(signer)]",
                    "  pub user_transfer_authority: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub source: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub swap_source: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub swap_destination: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub destination: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub pool_mint: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub pool_fee: AccountInfo<'info>,",
                    "}",
                    ""
                  ],
                  "label": "Jupiter's Instruction StepSwap",
                  "type": 2,
                  "children": [],
                  "parentId": 22,
                  "id": 33
                },
                {
                  "requires": [],
                  "description": "Creates the interface instruction `cropperSwap` of the `Jupiter` program",
                  "content": [
                    "#[derive(Accounts)]",
                    "pub struct CropperSwap<'info> {",
                    "  pub token_swap_program: AccountInfo<'info>,",
                    "  pub token_program: AccountInfo<'info>,",
                    "  pub swap: AccountInfo<'info>,",
                    "  pub swap_state: AccountInfo<'info>,",
                    "  pub authority: AccountInfo<'info>,",
                    "  #[account(signer)]",
                    "  pub user_transfer_authority: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub source: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub swap_source: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub swap_destination: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub destination: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub pool_mint: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub pool_fee: AccountInfo<'info>,",
                    "}",
                    ""
                  ],
                  "label": "Jupiter's Instruction CropperSwap",
                  "type": 2,
                  "children": [],
                  "parentId": 22,
                  "id": 34
                },
                {
                  "requires": [],
                  "description": "Creates the interface instruction `raydiumSwap` of the `Jupiter` program",
                  "content": [
                    "#[derive(Accounts)]",
                    "pub struct RaydiumSwap<'info> {",
                    "  pub swap_program: AccountInfo<'info>,",
                    "  pub token_program: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub amm_id: AccountInfo<'info>,",
                    "  pub amm_authority: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub amm_open_orders: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub pool_coin_token_account: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub pool_pc_token_account: AccountInfo<'info>,",
                    "  pub serum_program_id: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub serum_market: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub serum_bids: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub serum_asks: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub serum_event_queue: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub serum_coin_vault_account: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub serum_pc_vault_account: AccountInfo<'info>,",
                    "  pub serum_vault_signer: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub user_source_token_account: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub user_destination_token_account: AccountInfo<'info>,",
                    "  #[account(signer)]",
                    "  pub user_source_owner: AccountInfo<'info>,",
                    "}",
                    ""
                  ],
                  "label": "Jupiter's Instruction RaydiumSwap",
                  "type": 2,
                  "children": [],
                  "parentId": 22,
                  "id": 35
                },
                {
                  "requires": [],
                  "description": "Creates the interface instruction `cremaSwap` of the `Jupiter` program",
                  "content": [
                    "#[derive(Accounts)]",
                    "pub struct CremaSwap<'info> {",
                    "  pub swap_program: AccountInfo<'info>,",
                    "  pub clmm_config: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub clmmpool: AccountInfo<'info>,",
                    "  pub token_a: AccountInfo<'info>,",
                    "  pub token_b: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub account_a: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub account_b: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub token_a_vault: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub token_b_vault: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub tick_array_map: AccountInfo<'info>,",
                    "  #[account(signer)]",
                    "  pub owner: AccountInfo<'info>,",
                    "  pub partner: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub partner_ata_a: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub partner_ata_b: AccountInfo<'info>,",
                    "  pub token_program: AccountInfo<'info>,",
                    "}",
                    ""
                  ],
                  "label": "Jupiter's Instruction CremaSwap",
                  "type": 2,
                  "children": [],
                  "parentId": 22,
                  "id": 36
                },
                {
                  "requires": [],
                  "description": "Creates the interface instruction `lifinitySwap` of the `Jupiter` program",
                  "content": [
                    "#[derive(Accounts)]",
                    "pub struct LifinitySwap<'info> {",
                    "  pub swap_program: AccountInfo<'info>,",
                    "  pub authority: AccountInfo<'info>,",
                    "  pub amm: AccountInfo<'info>,",
                    "  #[account(signer)]",
                    "  pub user_transfer_authority: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub source_info: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub destination_info: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub swap_source: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub swap_destination: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub pool_mint: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub fee_account: AccountInfo<'info>,",
                    "  pub token_program: AccountInfo<'info>,",
                    "  pub pyth_account: AccountInfo<'info>,",
                    "  pub pyth_pc_account: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub config_account: AccountInfo<'info>,",
                    "}",
                    ""
                  ],
                  "label": "Jupiter's Instruction LifinitySwap",
                  "type": 2,
                  "children": [],
                  "parentId": 22,
                  "id": 37
                },
                {
                  "requires": [],
                  "description": "Creates the interface instruction `marinadeDeposit` of the `Jupiter` program",
                  "content": [
                    "#[derive(Accounts)]",
                    "pub struct MarinadeDeposit<'info> {",
                    "  pub marinade_finance_program: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub state: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub msol_mint: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub liq_pool_sol_leg_pda: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub liq_pool_msol_leg: AccountInfo<'info>,",
                    "  pub liq_pool_msol_leg_authority: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub reserve_pda: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub transfer_from: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub mint_to: AccountInfo<'info>,",
                    "  pub msol_mint_authority: AccountInfo<'info>,",
                    "  pub system_program: AccountInfo<'info>,",
                    "  pub token_program: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub user_wsol_token_account: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub temp_wsol_token_account: AccountInfo<'info>,",
                    "  #[account(mut, signer)]",
                    "  pub user_transfer_authority: AccountInfo<'info>,",
                    "  pub wsol_mint: AccountInfo<'info>,",
                    "  pub rent: AccountInfo<'info>,",
                    "}",
                    ""
                  ],
                  "label": "Jupiter's Instruction MarinadeDeposit",
                  "type": 2,
                  "children": [],
                  "parentId": 22,
                  "id": 38
                },
                {
                  "requires": [],
                  "description": "Creates the interface instruction `marinadeUnstake` of the `Jupiter` program",
                  "content": [
                    "#[derive(Accounts)]",
                    "pub struct MarinadeUnstake<'info> {",
                    "  pub marinade_finance_program: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub state: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub msol_mint: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub liq_pool_sol_leg_pda: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub liq_pool_msol_leg: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub treasury_msol_account: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub get_msol_from: AccountInfo<'info>,",
                    "  #[account(signer)]",
                    "  pub get_msol_from_authority: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub transfer_sol_to: AccountInfo<'info>,",
                    "  pub system_program: AccountInfo<'info>,",
                    "  pub token_program: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub user_wsol_token_account: AccountInfo<'info>,",
                    "}",
                    ""
                  ],
                  "label": "Jupiter's Instruction MarinadeUnstake",
                  "type": 2,
                  "children": [],
                  "parentId": 22,
                  "id": 39
                },
                {
                  "requires": [],
                  "description": "Creates the interface instruction `aldrinSwap` of the `Jupiter` program",
                  "content": [
                    "#[derive(Accounts)]",
                    "pub struct AldrinSwap<'info> {",
                    "  pub swap_program: AccountInfo<'info>,",
                    "  pub pool: AccountInfo<'info>,",
                    "  pub pool_signer: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub pool_mint: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub base_token_vault: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub quote_token_vault: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub fee_pool_token_account: AccountInfo<'info>,",
                    "  #[account(signer)]",
                    "  pub wallet_authority: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub user_base_token_account: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub user_quote_token_account: AccountInfo<'info>,",
                    "  pub token_program: AccountInfo<'info>,",
                    "}",
                    ""
                  ],
                  "label": "Jupiter's Instruction AldrinSwap",
                  "type": 2,
                  "children": [],
                  "parentId": 22,
                  "id": 40
                },
                {
                  "requires": [],
                  "description": "Creates the interface instruction `aldrinV2Swap` of the `Jupiter` program",
                  "content": [
                    "#[derive(Accounts)]",
                    "pub struct AldrinV2Swap<'info> {",
                    "  pub swap_program: AccountInfo<'info>,",
                    "  pub pool: AccountInfo<'info>,",
                    "  pub pool_signer: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub pool_mint: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub base_token_vault: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub quote_token_vault: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub fee_pool_token_account: AccountInfo<'info>,",
                    "  #[account(signer)]",
                    "  pub wallet_authority: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub user_base_token_account: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub user_quote_token_account: AccountInfo<'info>,",
                    "  pub curve: AccountInfo<'info>,",
                    "  pub token_program: AccountInfo<'info>,",
                    "}",
                    ""
                  ],
                  "label": "Jupiter's Instruction AldrinV2Swap",
                  "type": 2,
                  "children": [],
                  "parentId": 22,
                  "id": 41
                },
                {
                  "requires": [],
                  "description": "Creates the interface instruction `whirlpoolSwap` of the `Jupiter` program",
                  "content": [
                    "#[derive(Accounts)]",
                    "pub struct WhirlpoolSwap<'info> {",
                    "  pub swap_program: AccountInfo<'info>,",
                    "  pub token_program: AccountInfo<'info>,",
                    "  #[account(signer)]",
                    "  pub token_authority: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub whirlpool: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub token_owner_account_a: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub token_vault_a: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub token_owner_account_b: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub token_vault_b: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub tick_array0: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub tick_array1: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub tick_array2: AccountInfo<'info>,",
                    "  pub oracle: AccountInfo<'info>,",
                    "}",
                    ""
                  ],
                  "label": "Jupiter's Instruction WhirlpoolSwap",
                  "type": 2,
                  "children": [],
                  "parentId": 22,
                  "id": 42
                },
                {
                  "requires": [],
                  "description": "Creates the interface instruction `invariantSwap` of the `Jupiter` program",
                  "content": [
                    "#[derive(Accounts)]",
                    "pub struct InvariantSwap<'info> {",
                    "  pub swap_program: AccountInfo<'info>,",
                    "  pub state: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub pool: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub tickmap: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub account_x: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub account_y: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub reserve_x: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub reserve_y: AccountInfo<'info>,",
                    "  #[account(signer)]",
                    "  pub owner: AccountInfo<'info>,",
                    "  pub program_authority: AccountInfo<'info>,",
                    "  pub token_program: AccountInfo<'info>,",
                    "}",
                    ""
                  ],
                  "label": "Jupiter's Instruction InvariantSwap",
                  "type": 2,
                  "children": [],
                  "parentId": 22,
                  "id": 43
                },
                {
                  "requires": [],
                  "description": "Creates the interface instruction `meteoraSwap` of the `Jupiter` program",
                  "content": [
                    "#[derive(Accounts)]",
                    "pub struct MeteoraSwap<'info> {",
                    "  pub swap_program: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub pool: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub user_source_token: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub user_destination_token: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub a_vault: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub b_vault: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub a_token_vault: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub b_token_vault: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub a_vault_lp_mint: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub b_vault_lp_mint: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub a_vault_lp: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub b_vault_lp: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub admin_token_fee: AccountInfo<'info>,",
                    "  #[account(signer)]",
                    "  pub user: AccountInfo<'info>,",
                    "  pub vault_program: AccountInfo<'info>,",
                    "  pub token_program: AccountInfo<'info>,",
                    "}",
                    ""
                  ],
                  "label": "Jupiter's Instruction MeteoraSwap",
                  "type": 2,
                  "children": [],
                  "parentId": 22,
                  "id": 44
                },
                {
                  "requires": [],
                  "description": "Creates the interface instruction `goosefxSwap` of the `Jupiter` program",
                  "content": [
                    "#[derive(Accounts)]",
                    "pub struct GoosefxSwap<'info> {",
                    "  pub swap_program: AccountInfo<'info>,",
                    "  pub controller: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub pair: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub ssl_in: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub ssl_out: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub liability_vault_in: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub swapped_liability_vault_in: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub liability_vault_out: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub swapped_liability_vault_out: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub user_in_ata: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub user_out_ata: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub fee_collector_ata: AccountInfo<'info>,",
                    "  #[account(signer)]",
                    "  pub user_wallet: AccountInfo<'info>,",
                    "  pub fee_collector: AccountInfo<'info>,",
                    "  pub token_program: AccountInfo<'info>,",
                    "}",
                    ""
                  ],
                  "label": "Jupiter's Instruction GoosefxSwap",
                  "type": 2,
                  "children": [],
                  "parentId": 22,
                  "id": 45
                },
                {
                  "requires": [],
                  "description": "Creates the interface instruction `deltafiSwap` of the `Jupiter` program",
                  "content": [
                    "#[derive(Accounts)]",
                    "pub struct DeltafiSwap<'info> {",
                    "  pub swap_program: AccountInfo<'info>,",
                    "  pub market_config: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub swap_info: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub user_source_token: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub user_destination_token: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub swap_source_token: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub swap_destination_token: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub deltafi_user: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub admin_destination_token: AccountInfo<'info>,",
                    "  pub pyth_price_base: AccountInfo<'info>,",
                    "  pub pyth_price_quote: AccountInfo<'info>,",
                    "  #[account(signer)]",
                    "  pub user_authority: AccountInfo<'info>,",
                    "  pub token_program: AccountInfo<'info>,",
                    "}",
                    ""
                  ],
                  "label": "Jupiter's Instruction DeltafiSwap",
                  "type": 2,
                  "children": [],
                  "parentId": 22,
                  "id": 46
                },
                {
                  "requires": [],
                  "description": "Creates the interface instruction `balansolSwap` of the `Jupiter` program",
                  "content": [
                    "#[derive(Accounts)]",
                    "pub struct BalansolSwap<'info> {",
                    "  pub swap_program: AccountInfo<'info>,",
                    "  #[account(mut, signer)]",
                    "  pub authority: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub pool: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub tax_man: AccountInfo<'info>,",
                    "  pub bid_mint: AccountInfo<'info>,",
                    "  pub treasurer: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub src_treasury: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub src_associated_token_account: AccountInfo<'info>,",
                    "  pub ask_mint: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub dst_treasury: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub dst_associated_token_account: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub dst_token_account_taxman: AccountInfo<'info>,",
                    "  pub system_program: AccountInfo<'info>,",
                    "  pub token_program: AccountInfo<'info>,",
                    "  pub associated_token_program: AccountInfo<'info>,",
                    "  pub rent: AccountInfo<'info>,",
                    "}",
                    ""
                  ],
                  "label": "Jupiter's Instruction BalansolSwap",
                  "type": 2,
                  "children": [],
                  "parentId": 22,
                  "id": 47
                },
                {
                  "requires": [],
                  "description": "Creates the interface instruction `marcoPoloSwap` of the `Jupiter` program",
                  "content": [
                    "#[derive(Accounts)]",
                    "pub struct MarcoPoloSwap<'info> {",
                    "  pub swap_program: AccountInfo<'info>,",
                    "  pub state: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub pool: AccountInfo<'info>,",
                    "  pub token_x: AccountInfo<'info>,",
                    "  pub token_y: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub pool_x_account: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub pool_y_account: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub swapper_x_account: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub swapper_y_account: AccountInfo<'info>,",
                    "  #[account(mut, signer)]",
                    "  pub swapper: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub referrer_x_account: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub referrer_y_account: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub referrer: AccountInfo<'info>,",
                    "  pub program_authority: AccountInfo<'info>,",
                    "  pub system_program: AccountInfo<'info>,",
                    "  pub token_program: AccountInfo<'info>,",
                    "  pub associated_token_program: AccountInfo<'info>,",
                    "  pub rent: AccountInfo<'info>,",
                    "}",
                    ""
                  ],
                  "label": "Jupiter's Instruction MarcoPoloSwap",
                  "type": 2,
                  "children": [],
                  "parentId": 22,
                  "id": 48
                },
                {
                  "requires": [],
                  "description": "Creates the interface instruction `dradexSwap` of the `Jupiter` program",
                  "content": [
                    "#[derive(Accounts)]",
                    "pub struct DradexSwap<'info> {",
                    "  pub swap_program: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub pair: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub market: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub event_queue: AccountInfo<'info>,",
                    "  pub dex_user: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub market_user: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub bids: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub asks: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub t0_vault: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub t1_vault: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub t0_user: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub t1_user: AccountInfo<'info>,",
                    "  pub master: AccountInfo<'info>,",
                    "  #[account(mut, signer)]",
                    "  pub signer: AccountInfo<'info>,",
                    "  pub system_program: AccountInfo<'info>,",
                    "  pub token_program: AccountInfo<'info>,",
                    "  pub logger: AccountInfo<'info>,",
                    "}",
                    ""
                  ],
                  "label": "Jupiter's Instruction DradexSwap",
                  "type": 2,
                  "children": [],
                  "parentId": 22,
                  "id": 49
                },
                {
                  "requires": [],
                  "description": "Creates the interface instruction `lifinityV2Swap` of the `Jupiter` program",
                  "content": [
                    "#[derive(Accounts)]",
                    "pub struct LifinityV2Swap<'info> {",
                    "  pub swap_program: AccountInfo<'info>,",
                    "  pub authority: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub amm: AccountInfo<'info>,",
                    "  #[account(signer)]",
                    "  pub user_transfer_authority: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub source_info: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub destination_info: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub swap_source: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub swap_destination: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub pool_mint: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub fee_account: AccountInfo<'info>,",
                    "  pub token_program: AccountInfo<'info>,",
                    "  pub oracle_main_account: AccountInfo<'info>,",
                    "  pub oracle_sub_account: AccountInfo<'info>,",
                    "  pub oracle_pc_account: AccountInfo<'info>,",
                    "}",
                    ""
                  ],
                  "label": "Jupiter's Instruction LifinityV2Swap",
                  "type": 2,
                  "children": [],
                  "parentId": 22,
                  "id": 50
                },
                {
                  "requires": [],
                  "description": "Creates the interface instruction `raydiumClmmSwap` of the `Jupiter` program",
                  "content": [
                    "#[derive(Accounts)]",
                    "pub struct RaydiumClmmSwap<'info> {",
                    "  pub swap_program: AccountInfo<'info>,",
                    "  #[account(signer)]",
                    "  pub payer: AccountInfo<'info>,",
                    "  pub amm_config: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub pool_state: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub input_token_account: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub output_token_account: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub input_vault: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub output_vault: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub observation_state: AccountInfo<'info>,",
                    "  pub token_program: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub tick_array: AccountInfo<'info>,",
                    "}",
                    ""
                  ],
                  "label": "Jupiter's Instruction RaydiumClmmSwap",
                  "type": 2,
                  "children": [],
                  "parentId": 22,
                  "id": 51
                },
                {
                  "requires": [],
                  "description": "Generates the type `AmountWithSlippage` of the `Jupiter` program",
                  "content": [
                    "#[derive(Clone, Debug, AnchorSerialize, AnchorDeserialize)]",
                    "pub struct AmountWithSlippage {",
                    "  pub amount: u64,",
                    "  pub slippage_bps: u16,",
                    "}",
                    ""
                  ],
                  "label": "Jupiter's Type AmountWithSlippage",
                  "type": 2,
                  "children": [],
                  "parentId": 22,
                  "id": 52
                },
                {
                  "requires": [],
                  "description": "Generates the type `SplitLegDeeper` of the `Jupiter` program",
                  "content": [
                    "#[derive(Clone, Debug, AnchorSerialize, AnchorDeserialize)]",
                    "pub struct SplitLegDeeper {",
                    "  pub percent: u8,",
                    "  pub swap_leg: SwapLegSwap,",
                    "}",
                    ""
                  ],
                  "label": "Jupiter's Type SplitLegDeeper",
                  "type": 2,
                  "children": [],
                  "parentId": 22,
                  "id": 53
                },
                {
                  "requires": [],
                  "description": "Generates the type `SplitLeg` of the `Jupiter` program",
                  "content": [
                    "#[derive(Clone, Debug, AnchorSerialize, AnchorDeserialize)]",
                    "pub struct SplitLeg {",
                    "  pub percent: u8,",
                    "  pub swap_leg: SwapLegDeeper,",
                    "}",
                    ""
                  ],
                  "label": "Jupiter's Type SplitLeg",
                  "type": 2,
                  "children": [],
                  "parentId": 22,
                  "id": 54
                },
                {
                  "requires": [],
                  "description": "Generates the type `SwapInstrution` of the `Jupiter` program",
                  "content": [],
                  "label": "Jupiter's Type SwapInstrution",
                  "type": 2,
                  "children": [],
                  "parentId": 22,
                  "id": 55
                },
                {
                  "requires": [],
                  "description": "Generates the type `Side` of the `Jupiter` program",
                  "content": [
                    "#[derive(Clone, Debug, AnchorSerialize, AnchorDeserialize)]",
                    "pub enum Side {",
                    "  Bid,",
                    "  Ask,",
                    "}",
                    ""
                  ],
                  "label": "Jupiter's Type Side",
                  "type": 2,
                  "children": [],
                  "parentId": 22,
                  "id": 56
                },
                {
                  "requires": [],
                  "description": "Generates the type `SwapLegSwap` of the `Jupiter` program",
                  "content": [
                    "#[derive(Clone, Debug, AnchorSerialize, AnchorDeserialize)]",
                    "pub enum SwapLegSwap {",
                    "  PlaceholderOne,",
                    "  PlaceholderTwo,",
                    "  Swap { swap: Swap },",
                    "}",
                    ""
                  ],
                  "label": "Jupiter's Type SwapLegSwap",
                  "type": 2,
                  "children": [],
                  "parentId": 22,
                  "id": 57
                },
                {
                  "requires": [],
                  "description": "Generates the type `SwapLegDeeper` of the `Jupiter` program",
                  "content": [
                    "#[derive(Clone, Debug, AnchorSerialize, AnchorDeserialize)]",
                    "pub enum SwapLegDeeper {",
                    "  Chain { swap_legs: Vec<SwapLegSwap> },",
                    "  Split { split_legs: Vec<SplitLegDeeper> },",
                    "  Swap { swap: Swap },",
                    "}",
                    ""
                  ],
                  "label": "Jupiter's Type SwapLegDeeper",
                  "type": 2,
                  "children": [],
                  "parentId": 22,
                  "id": 58
                },
                {
                  "requires": [],
                  "description": "Generates the type `SwapLeg` of the `Jupiter` program",
                  "content": [
                    "#[derive(Clone, Debug, AnchorSerialize, AnchorDeserialize)]",
                    "pub enum SwapLeg {",
                    "  Chain { swap_legs: Vec<SwapLegDeeper> },",
                    "  Split { split_legs: Vec<SplitLeg> },",
                    "  Swap { swap: Swap },",
                    "}",
                    ""
                  ],
                  "label": "Jupiter's Type SwapLeg",
                  "type": 2,
                  "children": [],
                  "parentId": 22,
                  "id": 59
                },
                {
                  "requires": [],
                  "description": "Generates the type `Swap` of the `Jupiter` program",
                  "content": [
                    "#[derive(Clone, Debug, AnchorSerialize, AnchorDeserialize)]",
                    "pub enum Swap {",
                    "  Saber,",
                    "  SaberAddDecimalsDeposit,",
                    "  SaberAddDecimalsWithdraw,",
                    "  TokenSwap,",
                    "  Sencha,",
                    "  Step,",
                    "  Cropper,",
                    "  Raydium,",
                    "  Crema { a_to_b: bool },",
                    "  Lifinity,",
                    "  Mercurial,",
                    "  Cykura,",
                    "  Serum { side: Side },",
                    "  MarinadeDeposit,",
                    "  MarinadeUnstake,",
                    "  Aldrin { side: Side },",
                    "  AldrinV2 { side: Side },",
                    "  Whirlpool { a_to_b: bool },",
                    "  Invariant { x_to_y: bool },",
                    "  Meteora,",
                    "  GooseFX,",
                    "  DeltaFi { stable: bool },",
                    "  Balansol,",
                    "  MarcoPolo { x_to_y: bool },",
                    "  Dradex { side: Side },",
                    "  LifinityV2,",
                    "  RaydiumClmm,",
                    "  Openbook { side: Side },",
                    "}",
                    ""
                  ],
                  "label": "Jupiter's Type Swap",
                  "type": 2,
                  "children": [],
                  "parentId": 22,
                  "id": 60
                },
                {
                  "requires": [],
                  "description": "Generates the type `SwapAction` of the `Jupiter` program",
                  "content": [
                    "#[derive(Clone, Debug, AnchorSerialize, AnchorDeserialize)]",
                    "pub enum SwapAction {",
                    "  SetupSplit { percents: Vec<u8> },",
                    "  NextSplitLeg,",
                    "  MergeSplit,",
                    "  Swap { swap: Swap },",
                    "}",
                    ""
                  ],
                  "label": "Jupiter's Type SwapAction",
                  "type": 2,
                  "children": [],
                  "parentId": 22,
                  "id": 61
                },
                {
                  "requires": [],
                  "description": "Creates the interface of the `Jupiter` program",
                  "content": [
                    "use anchor_lang::prelude::*;",
                    "",
                    "declare_id!(\"JUP4Fb2cqiRUcaTHdrPC8h2gNsA2ETXiPDD33WcGuJB\");",
                    "",
                    "#[derive(Accounts)]",
                    "pub struct Route<'info> {",
                    "  pub token_program: AccountInfo<'info>,",
                    "  #[account(signer)]",
                    "  pub user_transfer_authority: AccountInfo<'info>,",
                    "  pub destination_token_account: AccountInfo<'info>,",
                    "}",
                    "",
                    "#[derive(Accounts)]",
                    "pub struct WhirlpoolSwapExactOutput<'info> {",
                    "  pub swap_program: AccountInfo<'info>,",
                    "  pub token_program: AccountInfo<'info>,",
                    "  #[account(signer)]",
                    "  pub token_authority: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub whirlpool: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub token_owner_account_a: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub token_vault_a: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub token_owner_account_b: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub token_vault_b: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub tick_array0: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub tick_array1: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub tick_array2: AccountInfo<'info>,",
                    "  pub oracle: AccountInfo<'info>,",
                    "}",
                    "",
                    "#[derive(Accounts)]",
                    "pub struct CreateOpenOrders<'info> {",
                    "  #[account(mut)]",
                    "  pub open_orders: AccountInfo<'info>,",
                    "  #[account(mut, signer)]",
                    "  pub payer: AccountInfo<'info>,",
                    "  pub dex_program: AccountInfo<'info>,",
                    "  pub system_program: AccountInfo<'info>,",
                    "  pub rent: AccountInfo<'info>,",
                    "  pub market: AccountInfo<'info>,",
                    "}",
                    "",
                    "#[derive(Accounts)]",
                    "pub struct MercurialSwap<'info> {",
                    "  pub swap_program: AccountInfo<'info>,",
                    "  pub swap_state: AccountInfo<'info>,",
                    "  pub token_program: AccountInfo<'info>,",
                    "  pub pool_authority: AccountInfo<'info>,",
                    "  #[account(signer)]",
                    "  pub user_transfer_authority: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub source_token_account: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub destination_token_account: AccountInfo<'info>,",
                    "}",
                    "",
                    "#[derive(Accounts)]",
                    "pub struct CykuraSwap<'info> {",
                    "  pub swap_program: AccountInfo<'info>,",
                    "  #[account(signer)]",
                    "  pub signer: AccountInfo<'info>,",
                    "  pub factory_state: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub pool_state: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub input_token_account: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub output_token_account: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub input_vault: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub output_vault: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub last_observation_state: AccountInfo<'info>,",
                    "  pub core_program: AccountInfo<'info>,",
                    "  pub token_program: AccountInfo<'info>,",
                    "}",
                    "",
                    "#[derive(Accounts)]",
                    "pub struct MarketSerumSwap<'info> {",
                    "  #[account(mut)]",
                    "  pub market: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub open_orders: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub request_queue: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub event_queue: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub bids: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub asks: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub coin_vault: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub pc_vault: AccountInfo<'info>,",
                    "  pub vault_signer: AccountInfo<'info>,",
                    "}",
                    "",
                    "#[derive(Accounts)]",
                    "pub struct SerumSwap<'info> {",
                    "  pub market_serum_swap: MarketSerumSwap<'info>,",
                    "  #[account(signer)]",
                    "  pub authority: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub order_payer_token_account: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub coin_wallet: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub pc_wallet: AccountInfo<'info>,",
                    "  pub dex_program: AccountInfo<'info>,",
                    "  pub token_program: AccountInfo<'info>,",
                    "  pub rent: AccountInfo<'info>,",
                    "}",
                    "",
                    "#[derive(Accounts)]",
                    "pub struct SaberSwap<'info> {",
                    "  pub swap_program: AccountInfo<'info>,",
                    "  pub token_program: AccountInfo<'info>,",
                    "  pub swap: AccountInfo<'info>,",
                    "  pub swap_authority: AccountInfo<'info>,",
                    "  pub user_authority: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub input_user_account: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub input_token_account: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub output_user_account: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub output_token_account: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub fees_token_account: AccountInfo<'info>,",
                    "}",
                    "",
                    "#[derive(Accounts)]",
                    "pub struct SaberAddDecimals<'info> {",
                    "  pub add_decimals_program: AccountInfo<'info>,",
                    "  pub wrapper: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub wrapper_mint: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub wrapper_underlying_tokens: AccountInfo<'info>,",
                    "  #[account(signer)]",
                    "  pub owner: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub user_underlying_tokens: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub user_wrapped_tokens: AccountInfo<'info>,",
                    "  pub token_program: AccountInfo<'info>,",
                    "}",
                    "",
                    "#[derive(Accounts)]",
                    "pub struct TokenSwap<'info> {",
                    "  pub token_swap_program: AccountInfo<'info>,",
                    "  pub token_program: AccountInfo<'info>,",
                    "  pub swap: AccountInfo<'info>,",
                    "  pub authority: AccountInfo<'info>,",
                    "  #[account(signer)]",
                    "  pub user_transfer_authority: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub source: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub swap_source: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub swap_destination: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub destination: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub pool_mint: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub pool_fee: AccountInfo<'info>,",
                    "}",
                    "",
                    "#[derive(Accounts)]",
                    "pub struct SenchaSwap<'info> {",
                    "  pub swap_program: AccountInfo<'info>,",
                    "  pub token_program: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub swap: AccountInfo<'info>,",
                    "  pub user_authority: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub input_user_account: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub input_token_account: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub input_fees_account: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub output_user_account: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub output_token_account: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub output_fees_account: AccountInfo<'info>,",
                    "}",
                    "",
                    "#[derive(Accounts)]",
                    "pub struct StepSwap<'info> {",
                    "  pub token_swap_program: AccountInfo<'info>,",
                    "  pub token_program: AccountInfo<'info>,",
                    "  pub swap: AccountInfo<'info>,",
                    "  pub authority: AccountInfo<'info>,",
                    "  #[account(signer)]",
                    "  pub user_transfer_authority: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub source: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub swap_source: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub swap_destination: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub destination: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub pool_mint: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub pool_fee: AccountInfo<'info>,",
                    "}",
                    "",
                    "#[derive(Accounts)]",
                    "pub struct CropperSwap<'info> {",
                    "  pub token_swap_program: AccountInfo<'info>,",
                    "  pub token_program: AccountInfo<'info>,",
                    "  pub swap: AccountInfo<'info>,",
                    "  pub swap_state: AccountInfo<'info>,",
                    "  pub authority: AccountInfo<'info>,",
                    "  #[account(signer)]",
                    "  pub user_transfer_authority: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub source: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub swap_source: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub swap_destination: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub destination: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub pool_mint: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub pool_fee: AccountInfo<'info>,",
                    "}",
                    "",
                    "#[derive(Accounts)]",
                    "pub struct RaydiumSwap<'info> {",
                    "  pub swap_program: AccountInfo<'info>,",
                    "  pub token_program: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub amm_id: AccountInfo<'info>,",
                    "  pub amm_authority: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub amm_open_orders: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub pool_coin_token_account: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub pool_pc_token_account: AccountInfo<'info>,",
                    "  pub serum_program_id: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub serum_market: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub serum_bids: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub serum_asks: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub serum_event_queue: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub serum_coin_vault_account: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub serum_pc_vault_account: AccountInfo<'info>,",
                    "  pub serum_vault_signer: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub user_source_token_account: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub user_destination_token_account: AccountInfo<'info>,",
                    "  #[account(signer)]",
                    "  pub user_source_owner: AccountInfo<'info>,",
                    "}",
                    "",
                    "#[derive(Accounts)]",
                    "pub struct CremaSwap<'info> {",
                    "  pub swap_program: AccountInfo<'info>,",
                    "  pub clmm_config: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub clmmpool: AccountInfo<'info>,",
                    "  pub token_a: AccountInfo<'info>,",
                    "  pub token_b: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub account_a: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub account_b: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub token_a_vault: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub token_b_vault: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub tick_array_map: AccountInfo<'info>,",
                    "  #[account(signer)]",
                    "  pub owner: AccountInfo<'info>,",
                    "  pub partner: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub partner_ata_a: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub partner_ata_b: AccountInfo<'info>,",
                    "  pub token_program: AccountInfo<'info>,",
                    "}",
                    "",
                    "#[derive(Accounts)]",
                    "pub struct LifinitySwap<'info> {",
                    "  pub swap_program: AccountInfo<'info>,",
                    "  pub authority: AccountInfo<'info>,",
                    "  pub amm: AccountInfo<'info>,",
                    "  #[account(signer)]",
                    "  pub user_transfer_authority: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub source_info: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub destination_info: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub swap_source: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub swap_destination: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub pool_mint: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub fee_account: AccountInfo<'info>,",
                    "  pub token_program: AccountInfo<'info>,",
                    "  pub pyth_account: AccountInfo<'info>,",
                    "  pub pyth_pc_account: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub config_account: AccountInfo<'info>,",
                    "}",
                    "",
                    "#[derive(Accounts)]",
                    "pub struct MarinadeDeposit<'info> {",
                    "  pub marinade_finance_program: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub state: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub msol_mint: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub liq_pool_sol_leg_pda: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub liq_pool_msol_leg: AccountInfo<'info>,",
                    "  pub liq_pool_msol_leg_authority: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub reserve_pda: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub transfer_from: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub mint_to: AccountInfo<'info>,",
                    "  pub msol_mint_authority: AccountInfo<'info>,",
                    "  pub system_program: AccountInfo<'info>,",
                    "  pub token_program: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub user_wsol_token_account: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub temp_wsol_token_account: AccountInfo<'info>,",
                    "  #[account(mut, signer)]",
                    "  pub user_transfer_authority: AccountInfo<'info>,",
                    "  pub wsol_mint: AccountInfo<'info>,",
                    "  pub rent: AccountInfo<'info>,",
                    "}",
                    "",
                    "#[derive(Accounts)]",
                    "pub struct MarinadeUnstake<'info> {",
                    "  pub marinade_finance_program: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub state: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub msol_mint: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub liq_pool_sol_leg_pda: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub liq_pool_msol_leg: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub treasury_msol_account: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub get_msol_from: AccountInfo<'info>,",
                    "  #[account(signer)]",
                    "  pub get_msol_from_authority: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub transfer_sol_to: AccountInfo<'info>,",
                    "  pub system_program: AccountInfo<'info>,",
                    "  pub token_program: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub user_wsol_token_account: AccountInfo<'info>,",
                    "}",
                    "",
                    "#[derive(Accounts)]",
                    "pub struct AldrinSwap<'info> {",
                    "  pub swap_program: AccountInfo<'info>,",
                    "  pub pool: AccountInfo<'info>,",
                    "  pub pool_signer: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub pool_mint: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub base_token_vault: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub quote_token_vault: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub fee_pool_token_account: AccountInfo<'info>,",
                    "  #[account(signer)]",
                    "  pub wallet_authority: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub user_base_token_account: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub user_quote_token_account: AccountInfo<'info>,",
                    "  pub token_program: AccountInfo<'info>,",
                    "}",
                    "",
                    "#[derive(Accounts)]",
                    "pub struct AldrinV2Swap<'info> {",
                    "  pub swap_program: AccountInfo<'info>,",
                    "  pub pool: AccountInfo<'info>,",
                    "  pub pool_signer: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub pool_mint: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub base_token_vault: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub quote_token_vault: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub fee_pool_token_account: AccountInfo<'info>,",
                    "  #[account(signer)]",
                    "  pub wallet_authority: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub user_base_token_account: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub user_quote_token_account: AccountInfo<'info>,",
                    "  pub curve: AccountInfo<'info>,",
                    "  pub token_program: AccountInfo<'info>,",
                    "}",
                    "",
                    "#[derive(Accounts)]",
                    "pub struct WhirlpoolSwap<'info> {",
                    "  pub swap_program: AccountInfo<'info>,",
                    "  pub token_program: AccountInfo<'info>,",
                    "  #[account(signer)]",
                    "  pub token_authority: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub whirlpool: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub token_owner_account_a: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub token_vault_a: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub token_owner_account_b: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub token_vault_b: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub tick_array0: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub tick_array1: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub tick_array2: AccountInfo<'info>,",
                    "  pub oracle: AccountInfo<'info>,",
                    "}",
                    "",
                    "#[derive(Accounts)]",
                    "pub struct InvariantSwap<'info> {",
                    "  pub swap_program: AccountInfo<'info>,",
                    "  pub state: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub pool: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub tickmap: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub account_x: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub account_y: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub reserve_x: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub reserve_y: AccountInfo<'info>,",
                    "  #[account(signer)]",
                    "  pub owner: AccountInfo<'info>,",
                    "  pub program_authority: AccountInfo<'info>,",
                    "  pub token_program: AccountInfo<'info>,",
                    "}",
                    "",
                    "#[derive(Accounts)]",
                    "pub struct MeteoraSwap<'info> {",
                    "  pub swap_program: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub pool: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub user_source_token: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub user_destination_token: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub a_vault: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub b_vault: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub a_token_vault: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub b_token_vault: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub a_vault_lp_mint: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub b_vault_lp_mint: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub a_vault_lp: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub b_vault_lp: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub admin_token_fee: AccountInfo<'info>,",
                    "  #[account(signer)]",
                    "  pub user: AccountInfo<'info>,",
                    "  pub vault_program: AccountInfo<'info>,",
                    "  pub token_program: AccountInfo<'info>,",
                    "}",
                    "",
                    "#[derive(Accounts)]",
                    "pub struct GoosefxSwap<'info> {",
                    "  pub swap_program: AccountInfo<'info>,",
                    "  pub controller: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub pair: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub ssl_in: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub ssl_out: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub liability_vault_in: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub swapped_liability_vault_in: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub liability_vault_out: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub swapped_liability_vault_out: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub user_in_ata: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub user_out_ata: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub fee_collector_ata: AccountInfo<'info>,",
                    "  #[account(signer)]",
                    "  pub user_wallet: AccountInfo<'info>,",
                    "  pub fee_collector: AccountInfo<'info>,",
                    "  pub token_program: AccountInfo<'info>,",
                    "}",
                    "",
                    "#[derive(Accounts)]",
                    "pub struct DeltafiSwap<'info> {",
                    "  pub swap_program: AccountInfo<'info>,",
                    "  pub market_config: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub swap_info: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub user_source_token: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub user_destination_token: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub swap_source_token: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub swap_destination_token: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub deltafi_user: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub admin_destination_token: AccountInfo<'info>,",
                    "  pub pyth_price_base: AccountInfo<'info>,",
                    "  pub pyth_price_quote: AccountInfo<'info>,",
                    "  #[account(signer)]",
                    "  pub user_authority: AccountInfo<'info>,",
                    "  pub token_program: AccountInfo<'info>,",
                    "}",
                    "",
                    "#[derive(Accounts)]",
                    "pub struct BalansolSwap<'info> {",
                    "  pub swap_program: AccountInfo<'info>,",
                    "  #[account(mut, signer)]",
                    "  pub authority: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub pool: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub tax_man: AccountInfo<'info>,",
                    "  pub bid_mint: AccountInfo<'info>,",
                    "  pub treasurer: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub src_treasury: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub src_associated_token_account: AccountInfo<'info>,",
                    "  pub ask_mint: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub dst_treasury: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub dst_associated_token_account: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub dst_token_account_taxman: AccountInfo<'info>,",
                    "  pub system_program: AccountInfo<'info>,",
                    "  pub token_program: AccountInfo<'info>,",
                    "  pub associated_token_program: AccountInfo<'info>,",
                    "  pub rent: AccountInfo<'info>,",
                    "}",
                    "",
                    "#[derive(Accounts)]",
                    "pub struct MarcoPoloSwap<'info> {",
                    "  pub swap_program: AccountInfo<'info>,",
                    "  pub state: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub pool: AccountInfo<'info>,",
                    "  pub token_x: AccountInfo<'info>,",
                    "  pub token_y: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub pool_x_account: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub pool_y_account: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub swapper_x_account: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub swapper_y_account: AccountInfo<'info>,",
                    "  #[account(mut, signer)]",
                    "  pub swapper: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub referrer_x_account: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub referrer_y_account: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub referrer: AccountInfo<'info>,",
                    "  pub program_authority: AccountInfo<'info>,",
                    "  pub system_program: AccountInfo<'info>,",
                    "  pub token_program: AccountInfo<'info>,",
                    "  pub associated_token_program: AccountInfo<'info>,",
                    "  pub rent: AccountInfo<'info>,",
                    "}",
                    "",
                    "#[derive(Accounts)]",
                    "pub struct DradexSwap<'info> {",
                    "  pub swap_program: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub pair: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub market: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub event_queue: AccountInfo<'info>,",
                    "  pub dex_user: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub market_user: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub bids: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub asks: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub t0_vault: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub t1_vault: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub t0_user: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub t1_user: AccountInfo<'info>,",
                    "  pub master: AccountInfo<'info>,",
                    "  #[account(mut, signer)]",
                    "  pub signer: AccountInfo<'info>,",
                    "  pub system_program: AccountInfo<'info>,",
                    "  pub token_program: AccountInfo<'info>,",
                    "  pub logger: AccountInfo<'info>,",
                    "}",
                    "",
                    "#[derive(Accounts)]",
                    "pub struct LifinityV2Swap<'info> {",
                    "  pub swap_program: AccountInfo<'info>,",
                    "  pub authority: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub amm: AccountInfo<'info>,",
                    "  #[account(signer)]",
                    "  pub user_transfer_authority: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub source_info: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub destination_info: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub swap_source: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub swap_destination: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub pool_mint: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub fee_account: AccountInfo<'info>,",
                    "  pub token_program: AccountInfo<'info>,",
                    "  pub oracle_main_account: AccountInfo<'info>,",
                    "  pub oracle_sub_account: AccountInfo<'info>,",
                    "  pub oracle_pc_account: AccountInfo<'info>,",
                    "}",
                    "",
                    "#[derive(Accounts)]",
                    "pub struct RaydiumClmmSwap<'info> {",
                    "  pub swap_program: AccountInfo<'info>,",
                    "  #[account(signer)]",
                    "  pub payer: AccountInfo<'info>,",
                    "  pub amm_config: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub pool_state: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub input_token_account: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub output_token_account: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub input_vault: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub output_vault: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub observation_state: AccountInfo<'info>,",
                    "  pub token_program: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub tick_array: AccountInfo<'info>,",
                    "}",
                    "",
                    "#[derive(Clone, Debug, AnchorSerialize, AnchorDeserialize)]",
                    "pub struct AmountWithSlippage {",
                    "  pub amount: u64,",
                    "  pub slippage_bps: u16,",
                    "}",
                    "",
                    "#[derive(Clone, Debug, AnchorSerialize, AnchorDeserialize)]",
                    "pub struct SplitLegDeeper {",
                    "  pub percent: u8,",
                    "  pub swap_leg: SwapLegSwap,",
                    "}",
                    "",
                    "#[derive(Clone, Debug, AnchorSerialize, AnchorDeserialize)]",
                    "pub struct SplitLeg {",
                    "  pub percent: u8,",
                    "  pub swap_leg: SwapLegDeeper,",
                    "}",
                    "",
                    "#[derive(Clone, Debug, AnchorSerialize, AnchorDeserialize)]",
                    "pub enum Side {",
                    "  Bid,",
                    "  Ask,",
                    "}",
                    "",
                    "#[derive(Clone, Debug, AnchorSerialize, AnchorDeserialize)]",
                    "pub enum SwapLegSwap {",
                    "  PlaceholderOne,",
                    "  PlaceholderTwo,",
                    "  Swap { swap: Swap },",
                    "}",
                    "",
                    "#[derive(Clone, Debug, AnchorSerialize, AnchorDeserialize)]",
                    "pub enum SwapLegDeeper {",
                    "  Chain { swap_legs: Vec<SwapLegSwap> },",
                    "  Split { split_legs: Vec<SplitLegDeeper> },",
                    "  Swap { swap: Swap },",
                    "}",
                    "",
                    "#[derive(Clone, Debug, AnchorSerialize, AnchorDeserialize)]",
                    "pub enum SwapLeg {",
                    "  Chain { swap_legs: Vec<SwapLegDeeper> },",
                    "  Split { split_legs: Vec<SplitLeg> },",
                    "  Swap { swap: Swap },",
                    "}",
                    "",
                    "#[derive(Clone, Debug, AnchorSerialize, AnchorDeserialize)]",
                    "pub enum Swap {",
                    "  Saber,",
                    "  SaberAddDecimalsDeposit,",
                    "  SaberAddDecimalsWithdraw,",
                    "  TokenSwap,",
                    "  Sencha,",
                    "  Step,",
                    "  Cropper,",
                    "  Raydium,",
                    "  Crema { a_to_b: bool },",
                    "  Lifinity,",
                    "  Mercurial,",
                    "  Cykura,",
                    "  Serum { side: Side },",
                    "  MarinadeDeposit,",
                    "  MarinadeUnstake,",
                    "  Aldrin { side: Side },",
                    "  AldrinV2 { side: Side },",
                    "  Whirlpool { a_to_b: bool },",
                    "  Invariant { x_to_y: bool },",
                    "  Meteora,",
                    "  GooseFX,",
                    "  DeltaFi { stable: bool },",
                    "  Balansol,",
                    "  MarcoPolo { x_to_y: bool },",
                    "  Dradex { side: Side },",
                    "  LifinityV2,",
                    "  RaydiumClmm,",
                    "  Openbook { side: Side },",
                    "}",
                    "",
                    "#[derive(Clone, Debug, AnchorSerialize, AnchorDeserialize)]",
                    "pub enum SwapAction {",
                    "  SetupSplit { percents: Vec<u8> },",
                    "  NextSplitLeg,",
                    "  MergeSplit,",
                    "  Swap { swap: Swap },",
                    "}",
                    ""
                  ],
                  "label": "All Jupiter Interfaces",
                  "type": 2,
                  "children": [],
                  "parentId": 22,
                  "id": 62
                },
                {
                  "requires": [],
                  "description": "Creates the interface instruction `initialize` of the `Marinade Finance` program",
                  "content": [
                    "#[derive(Accounts)]",
                    "pub struct LiqPoolInitialize<'info> {",
                    "  pub lp_mint: AccountInfo<'info>,",
                    "  pub sol_leg_pda: AccountInfo<'info>,",
                    "  pub msol_leg: AccountInfo<'info>,",
                    "}",
                    "",
                    "#[derive(Accounts)]",
                    "pub struct Initialize<'info> {",
                    "  #[account(signer)]",
                    "  pub creator_authority: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub state: AccountInfo<'info>,",
                    "  pub reserve_pda: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub stake_list: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub validator_list: AccountInfo<'info>,",
                    "  pub msol_mint: AccountInfo<'info>,",
                    "  pub operational_sol_account: AccountInfo<'info>,",
                    "  pub liq_pool_initialize: LiqPoolInitialize<'info>,",
                    "  pub treasury_msol_account: AccountInfo<'info>,",
                    "  pub clock: AccountInfo<'info>,",
                    "  pub rent: AccountInfo<'info>,",
                    "}",
                    ""
                  ],
                  "label": "Marinade Finance's Instruction Initialize",
                  "type": 2,
                  "children": [],
                  "parentId": 22,
                  "id": 63
                },
                {
                  "requires": [],
                  "description": "Creates the interface instruction `changeAuthority` of the `Marinade Finance` program",
                  "content": [
                    "#[derive(Accounts)]",
                    "pub struct ChangeAuthority<'info> {",
                    "  #[account(mut)]",
                    "  pub state: AccountInfo<'info>,",
                    "  #[account(signer)]",
                    "  pub admin_authority: AccountInfo<'info>,",
                    "}",
                    ""
                  ],
                  "label": "Marinade Finance's Instruction ChangeAuthority",
                  "type": 2,
                  "children": [],
                  "parentId": 22,
                  "id": 64
                },
                {
                  "requires": [],
                  "description": "Creates the interface instruction `addValidator` of the `Marinade Finance` program",
                  "content": [
                    "#[derive(Accounts)]",
                    "pub struct AddValidator<'info> {",
                    "  #[account(mut)]",
                    "  pub state: AccountInfo<'info>,",
                    "  #[account(signer)]",
                    "  pub manager_authority: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub validator_list: AccountInfo<'info>,",
                    "  pub validator_vote: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub duplication_flag: AccountInfo<'info>,",
                    "  #[account(mut, signer)]",
                    "  pub rent_payer: AccountInfo<'info>,",
                    "  pub clock: AccountInfo<'info>,",
                    "  pub rent: AccountInfo<'info>,",
                    "  pub system_program: AccountInfo<'info>,",
                    "}",
                    ""
                  ],
                  "label": "Marinade Finance's Instruction AddValidator",
                  "type": 2,
                  "children": [],
                  "parentId": 22,
                  "id": 65
                },
                {
                  "requires": [],
                  "description": "Creates the interface instruction `removeValidator` of the `Marinade Finance` program",
                  "content": [
                    "#[derive(Accounts)]",
                    "pub struct RemoveValidator<'info> {",
                    "  #[account(mut)]",
                    "  pub state: AccountInfo<'info>,",
                    "  #[account(signer)]",
                    "  pub manager_authority: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub validator_list: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub duplication_flag: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub operational_sol_account: AccountInfo<'info>,",
                    "}",
                    ""
                  ],
                  "label": "Marinade Finance's Instruction RemoveValidator",
                  "type": 2,
                  "children": [],
                  "parentId": 22,
                  "id": 66
                },
                {
                  "requires": [],
                  "description": "Creates the interface instruction `setValidatorScore` of the `Marinade Finance` program",
                  "content": [
                    "#[derive(Accounts)]",
                    "pub struct SetValidatorScore<'info> {",
                    "  #[account(mut)]",
                    "  pub state: AccountInfo<'info>,",
                    "  #[account(signer)]",
                    "  pub manager_authority: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub validator_list: AccountInfo<'info>,",
                    "}",
                    ""
                  ],
                  "label": "Marinade Finance's Instruction SetValidatorScore",
                  "type": 2,
                  "children": [],
                  "parentId": 22,
                  "id": 67
                },
                {
                  "requires": [],
                  "description": "Creates the interface instruction `configValidatorSystem` of the `Marinade Finance` program",
                  "content": [
                    "#[derive(Accounts)]",
                    "pub struct ConfigValidatorSystem<'info> {",
                    "  #[account(mut)]",
                    "  pub state: AccountInfo<'info>,",
                    "  #[account(signer)]",
                    "  pub manager_authority: AccountInfo<'info>,",
                    "}",
                    ""
                  ],
                  "label": "Marinade Finance's Instruction ConfigValidatorSystem",
                  "type": 2,
                  "children": [],
                  "parentId": 22,
                  "id": 68
                },
                {
                  "requires": [],
                  "description": "Creates the interface instruction `deposit` of the `Marinade Finance` program",
                  "content": [
                    "#[derive(Accounts)]",
                    "pub struct Deposit<'info> {",
                    "  #[account(mut)]",
                    "  pub state: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub msol_mint: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub liq_pool_sol_leg_pda: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub liq_pool_msol_leg: AccountInfo<'info>,",
                    "  pub liq_pool_msol_leg_authority: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub reserve_pda: AccountInfo<'info>,",
                    "  #[account(mut, signer)]",
                    "  pub transfer_from: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub mint_to: AccountInfo<'info>,",
                    "  pub msol_mint_authority: AccountInfo<'info>,",
                    "  pub system_program: AccountInfo<'info>,",
                    "  pub token_program: AccountInfo<'info>,",
                    "}",
                    ""
                  ],
                  "label": "Marinade Finance's Instruction Deposit",
                  "type": 2,
                  "children": [],
                  "parentId": 22,
                  "id": 69
                },
                {
                  "requires": [],
                  "description": "Creates the interface instruction `depositStakeAccount` of the `Marinade Finance` program",
                  "content": [
                    "#[derive(Accounts)]",
                    "pub struct DepositStakeAccount<'info> {",
                    "  #[account(mut)]",
                    "  pub state: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub validator_list: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub stake_list: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub stake_account: AccountInfo<'info>,",
                    "  #[account(signer)]",
                    "  pub stake_authority: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub duplication_flag: AccountInfo<'info>,",
                    "  #[account(mut, signer)]",
                    "  pub rent_payer: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub msol_mint: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub mint_to: AccountInfo<'info>,",
                    "  pub msol_mint_authority: AccountInfo<'info>,",
                    "  pub clock: AccountInfo<'info>,",
                    "  pub rent: AccountInfo<'info>,",
                    "  pub system_program: AccountInfo<'info>,",
                    "  pub token_program: AccountInfo<'info>,",
                    "  pub stake_program: AccountInfo<'info>,",
                    "}",
                    ""
                  ],
                  "label": "Marinade Finance's Instruction DepositStakeAccount",
                  "type": 2,
                  "children": [],
                  "parentId": 22,
                  "id": 70
                },
                {
                  "requires": [],
                  "description": "Creates the interface instruction `liquidUnstake` of the `Marinade Finance` program",
                  "content": [
                    "#[derive(Accounts)]",
                    "pub struct LiquidUnstake<'info> {",
                    "  #[account(mut)]",
                    "  pub state: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub msol_mint: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub liq_pool_sol_leg_pda: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub liq_pool_msol_leg: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub treasury_msol_account: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub get_msol_from: AccountInfo<'info>,",
                    "  #[account(signer)]",
                    "  pub get_msol_from_authority: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub transfer_sol_to: AccountInfo<'info>,",
                    "  pub system_program: AccountInfo<'info>,",
                    "  pub token_program: AccountInfo<'info>,",
                    "}",
                    ""
                  ],
                  "label": "Marinade Finance's Instruction LiquidUnstake",
                  "type": 2,
                  "children": [],
                  "parentId": 22,
                  "id": 71
                },
                {
                  "requires": [],
                  "description": "Creates the interface instruction `addLiquidity` of the `Marinade Finance` program",
                  "content": [
                    "#[derive(Accounts)]",
                    "pub struct AddLiquidity<'info> {",
                    "  #[account(mut)]",
                    "  pub state: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub lp_mint: AccountInfo<'info>,",
                    "  pub lp_mint_authority: AccountInfo<'info>,",
                    "  pub liq_pool_msol_leg: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub liq_pool_sol_leg_pda: AccountInfo<'info>,",
                    "  #[account(mut, signer)]",
                    "  pub transfer_from: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub mint_to: AccountInfo<'info>,",
                    "  pub system_program: AccountInfo<'info>,",
                    "  pub token_program: AccountInfo<'info>,",
                    "}",
                    ""
                  ],
                  "label": "Marinade Finance's Instruction AddLiquidity",
                  "type": 2,
                  "children": [],
                  "parentId": 22,
                  "id": 72
                },
                {
                  "requires": [],
                  "description": "Creates the interface instruction `removeLiquidity` of the `Marinade Finance` program",
                  "content": [
                    "#[derive(Accounts)]",
                    "pub struct RemoveLiquidity<'info> {",
                    "  #[account(mut)]",
                    "  pub state: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub lp_mint: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub burn_from: AccountInfo<'info>,",
                    "  #[account(signer)]",
                    "  pub burn_from_authority: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub transfer_sol_to: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub transfer_msol_to: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub liq_pool_sol_leg_pda: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub liq_pool_msol_leg: AccountInfo<'info>,",
                    "  pub liq_pool_msol_leg_authority: AccountInfo<'info>,",
                    "  pub system_program: AccountInfo<'info>,",
                    "  pub token_program: AccountInfo<'info>,",
                    "}",
                    ""
                  ],
                  "label": "Marinade Finance's Instruction RemoveLiquidity",
                  "type": 2,
                  "children": [],
                  "parentId": 22,
                  "id": 73
                },
                {
                  "requires": [],
                  "description": "Creates the interface instruction `configLp` of the `Marinade Finance` program",
                  "content": [
                    "#[derive(Accounts)]",
                    "pub struct ConfigLp<'info> {",
                    "  #[account(mut)]",
                    "  pub state: AccountInfo<'info>,",
                    "  #[account(signer)]",
                    "  pub admin_authority: AccountInfo<'info>,",
                    "}",
                    ""
                  ],
                  "label": "Marinade Finance's Instruction ConfigLp",
                  "type": 2,
                  "children": [],
                  "parentId": 22,
                  "id": 74
                },
                {
                  "requires": [],
                  "description": "Creates the interface instruction `configMarinade` of the `Marinade Finance` program",
                  "content": [
                    "#[derive(Accounts)]",
                    "pub struct ConfigMarinade<'info> {",
                    "  #[account(mut)]",
                    "  pub state: AccountInfo<'info>,",
                    "  #[account(signer)]",
                    "  pub admin_authority: AccountInfo<'info>,",
                    "}",
                    ""
                  ],
                  "label": "Marinade Finance's Instruction ConfigMarinade",
                  "type": 2,
                  "children": [],
                  "parentId": 22,
                  "id": 75
                },
                {
                  "requires": [],
                  "description": "Creates the interface instruction `orderUnstake` of the `Marinade Finance` program",
                  "content": [
                    "#[derive(Accounts)]",
                    "pub struct OrderUnstake<'info> {",
                    "  #[account(mut)]",
                    "  pub state: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub msol_mint: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub burn_msol_from: AccountInfo<'info>,",
                    "  #[account(signer)]",
                    "  pub burn_msol_authority: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub new_ticket_account: AccountInfo<'info>,",
                    "  pub clock: AccountInfo<'info>,",
                    "  pub rent: AccountInfo<'info>,",
                    "  pub token_program: AccountInfo<'info>,",
                    "}",
                    ""
                  ],
                  "label": "Marinade Finance's Instruction OrderUnstake",
                  "type": 2,
                  "children": [],
                  "parentId": 22,
                  "id": 76
                },
                {
                  "requires": [],
                  "description": "Creates the interface instruction `claim` of the `Marinade Finance` program",
                  "content": [
                    "#[derive(Accounts)]",
                    "pub struct Claim<'info> {",
                    "  #[account(mut)]",
                    "  pub state: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub reserve_pda: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub ticket_account: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub transfer_sol_to: AccountInfo<'info>,",
                    "  pub clock: AccountInfo<'info>,",
                    "  pub system_program: AccountInfo<'info>,",
                    "}",
                    ""
                  ],
                  "label": "Marinade Finance's Instruction Claim",
                  "type": 2,
                  "children": [],
                  "parentId": 22,
                  "id": 77
                },
                {
                  "requires": [],
                  "description": "Creates the interface instruction `stakeReserve` of the `Marinade Finance` program",
                  "content": [
                    "#[derive(Accounts)]",
                    "pub struct StakeReserve<'info> {",
                    "  #[account(mut)]",
                    "  pub state: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub validator_list: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub stake_list: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub validator_vote: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub reserve_pda: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub stake_account: AccountInfo<'info>,",
                    "  pub stake_deposit_authority: AccountInfo<'info>,",
                    "  pub clock: AccountInfo<'info>,",
                    "  pub epoch_schedule: AccountInfo<'info>,",
                    "  pub rent: AccountInfo<'info>,",
                    "  pub stake_history: AccountInfo<'info>,",
                    "  pub stake_config: AccountInfo<'info>,",
                    "  pub system_program: AccountInfo<'info>,",
                    "  pub stake_program: AccountInfo<'info>,",
                    "}",
                    ""
                  ],
                  "label": "Marinade Finance's Instruction StakeReserve",
                  "type": 2,
                  "children": [],
                  "parentId": 22,
                  "id": 78
                },
                {
                  "requires": [],
                  "description": "Creates the interface instruction `updateActive` of the `Marinade Finance` program",
                  "content": [
                    "#[derive(Accounts)]",
                    "pub struct CommonUpdateActive<'info> {",
                    "  #[account(mut)]",
                    "  pub state: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub stake_list: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub stake_account: AccountInfo<'info>,",
                    "  pub stake_withdraw_authority: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub reserve_pda: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub msol_mint: AccountInfo<'info>,",
                    "  pub msol_mint_authority: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub treasury_msol_account: AccountInfo<'info>,",
                    "  pub clock: AccountInfo<'info>,",
                    "  pub stake_history: AccountInfo<'info>,",
                    "  pub stake_program: AccountInfo<'info>,",
                    "  pub token_program: AccountInfo<'info>,",
                    "}",
                    "",
                    "#[derive(Accounts)]",
                    "pub struct UpdateActive<'info> {",
                    "  pub common_update_active: CommonUpdateActive<'info>,",
                    "  #[account(mut)]",
                    "  pub validator_list: AccountInfo<'info>,",
                    "}",
                    ""
                  ],
                  "label": "Marinade Finance's Instruction UpdateActive",
                  "type": 2,
                  "children": [],
                  "parentId": 22,
                  "id": 79
                },
                {
                  "requires": [],
                  "description": "Creates the interface instruction `updateDeactivated` of the `Marinade Finance` program",
                  "content": [
                    "#[derive(Accounts)]",
                    "pub struct CommonUpdateDeactivated<'info> {",
                    "  #[account(mut)]",
                    "  pub state: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub stake_list: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub stake_account: AccountInfo<'info>,",
                    "  pub stake_withdraw_authority: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub reserve_pda: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub msol_mint: AccountInfo<'info>,",
                    "  pub msol_mint_authority: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub treasury_msol_account: AccountInfo<'info>,",
                    "  pub clock: AccountInfo<'info>,",
                    "  pub stake_history: AccountInfo<'info>,",
                    "  pub stake_program: AccountInfo<'info>,",
                    "  pub token_program: AccountInfo<'info>,",
                    "}",
                    "",
                    "#[derive(Accounts)]",
                    "pub struct UpdateDeactivated<'info> {",
                    "  pub common_update_deactivated: CommonUpdateDeactivated<'info>,",
                    "  #[account(mut)]",
                    "  pub operational_sol_account: AccountInfo<'info>,",
                    "  pub system_program: AccountInfo<'info>,",
                    "}",
                    ""
                  ],
                  "label": "Marinade Finance's Instruction UpdateDeactivated",
                  "type": 2,
                  "children": [],
                  "parentId": 22,
                  "id": 80
                },
                {
                  "requires": [],
                  "description": "Creates the interface instruction `deactivateStake` of the `Marinade Finance` program",
                  "content": [
                    "#[derive(Accounts)]",
                    "pub struct DeactivateStake<'info> {",
                    "  #[account(mut)]",
                    "  pub state: AccountInfo<'info>,",
                    "  pub reserve_pda: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub validator_list: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub stake_list: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub stake_account: AccountInfo<'info>,",
                    "  pub stake_deposit_authority: AccountInfo<'info>,",
                    "  #[account(mut, signer)]",
                    "  pub split_stake_account: AccountInfo<'info>,",
                    "  #[account(mut, signer)]",
                    "  pub split_stake_rent_payer: AccountInfo<'info>,",
                    "  pub clock: AccountInfo<'info>,",
                    "  pub rent: AccountInfo<'info>,",
                    "  pub epoch_schedule: AccountInfo<'info>,",
                    "  pub stake_history: AccountInfo<'info>,",
                    "  pub system_program: AccountInfo<'info>,",
                    "  pub stake_program: AccountInfo<'info>,",
                    "}",
                    ""
                  ],
                  "label": "Marinade Finance's Instruction DeactivateStake",
                  "type": 2,
                  "children": [],
                  "parentId": 22,
                  "id": 81
                },
                {
                  "requires": [],
                  "description": "Creates the interface instruction `emergencyUnstake` of the `Marinade Finance` program",
                  "content": [
                    "#[derive(Accounts)]",
                    "pub struct EmergencyUnstake<'info> {",
                    "  #[account(mut)]",
                    "  pub state: AccountInfo<'info>,",
                    "  #[account(signer)]",
                    "  pub validator_manager_authority: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub validator_list: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub stake_list: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub stake_account: AccountInfo<'info>,",
                    "  pub stake_deposit_authority: AccountInfo<'info>,",
                    "  pub clock: AccountInfo<'info>,",
                    "  pub stake_program: AccountInfo<'info>,",
                    "}",
                    ""
                  ],
                  "label": "Marinade Finance's Instruction EmergencyUnstake",
                  "type": 2,
                  "children": [],
                  "parentId": 22,
                  "id": 82
                },
                {
                  "requires": [],
                  "description": "Creates the interface instruction `partialUnstake` of the `Marinade Finance` program",
                  "content": [
                    "#[derive(Accounts)]",
                    "pub struct PartialUnstake<'info> {",
                    "  #[account(mut)]",
                    "  pub state: AccountInfo<'info>,",
                    "  #[account(signer)]",
                    "  pub validator_manager_authority: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub validator_list: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub stake_list: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub stake_account: AccountInfo<'info>,",
                    "  pub stake_deposit_authority: AccountInfo<'info>,",
                    "  pub reserve_pda: AccountInfo<'info>,",
                    "  #[account(mut, signer)]",
                    "  pub split_stake_account: AccountInfo<'info>,",
                    "  #[account(mut, signer)]",
                    "  pub split_stake_rent_payer: AccountInfo<'info>,",
                    "  pub clock: AccountInfo<'info>,",
                    "  pub rent: AccountInfo<'info>,",
                    "  pub stake_history: AccountInfo<'info>,",
                    "  pub system_program: AccountInfo<'info>,",
                    "  pub stake_program: AccountInfo<'info>,",
                    "}",
                    ""
                  ],
                  "label": "Marinade Finance's Instruction PartialUnstake",
                  "type": 2,
                  "children": [],
                  "parentId": 22,
                  "id": 83
                },
                {
                  "requires": [],
                  "description": "Creates the interface instruction `mergeStakes` of the `Marinade Finance` program",
                  "content": [
                    "#[derive(Accounts)]",
                    "pub struct MergeStakes<'info> {",
                    "  #[account(mut)]",
                    "  pub state: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub stake_list: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub validator_list: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub destination_stake: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub source_stake: AccountInfo<'info>,",
                    "  pub stake_deposit_authority: AccountInfo<'info>,",
                    "  pub stake_withdraw_authority: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub operational_sol_account: AccountInfo<'info>,",
                    "  pub clock: AccountInfo<'info>,",
                    "  pub stake_history: AccountInfo<'info>,",
                    "  pub stake_program: AccountInfo<'info>,",
                    "}",
                    ""
                  ],
                  "label": "Marinade Finance's Instruction MergeStakes",
                  "type": 2,
                  "children": [],
                  "parentId": 22,
                  "id": 84
                },
                {
                  "requires": [],
                  "description": "Generates the account `State` of the `Marinade Finance` program",
                  "content": [
                    "#[account]",
                    "pub struct State {",
                    "  pub msol_mint: Pubkey,",
                    "  pub admin_authority: Pubkey,",
                    "  pub operational_sol_account: Pubkey,",
                    "  pub treasury_msol_account: Pubkey,",
                    "  pub reserve_bump_seed: u8,",
                    "  pub msol_mint_authority_bump_seed: u8,",
                    "  pub rent_exempt_for_token_acc: u64,",
                    "  pub reward_fee: Fee,",
                    "  pub stake_system: StakeSystem,",
                    "  pub validator_system: ValidatorSystem,",
                    "  pub liq_pool: LiqPool,",
                    "  pub available_reserve_balance: u64,",
                    "  pub msol_supply: u64,",
                    "  pub msol_price: u64,",
                    "  pub circulating_ticket_count: u64,",
                    "  pub circulating_ticket_balance: u64,",
                    "  pub lent_from_reserve: u64,",
                    "  pub min_deposit: u64,",
                    "  pub min_withdraw: u64,",
                    "  pub staking_sol_cap: u64,",
                    "  pub emergency_cooling_down: u64,",
                    "}",
                    ""
                  ],
                  "label": "Marinade Finance's Account State",
                  "type": 2,
                  "children": [],
                  "parentId": 22,
                  "id": 85
                },
                {
                  "requires": [],
                  "description": "Generates the account `TicketAccountData` of the `Marinade Finance` program",
                  "content": [
                    "#[account]",
                    "pub struct TicketAccountData {",
                    "  pub state_address: Pubkey,",
                    "  pub beneficiary: Pubkey,",
                    "  pub lamports_amount: u64,",
                    "  pub created_epoch: u64,",
                    "}",
                    ""
                  ],
                  "label": "Marinade Finance's Account TicketAccountData",
                  "type": 2,
                  "children": [],
                  "parentId": 22,
                  "id": 86
                },
                {
                  "requires": [],
                  "description": "Generates the type `Fee` of the `Marinade Finance` program",
                  "content": [
                    "#[derive(Clone, Debug, AnchorSerialize, AnchorDeserialize)]",
                    "pub struct Fee {",
                    "  pub basis_points: u32,",
                    "}",
                    ""
                  ],
                  "label": "Marinade Finance's Type Fee",
                  "type": 2,
                  "children": [],
                  "parentId": 22,
                  "id": 87
                },
                {
                  "requires": [],
                  "description": "Generates the type `InitializeData` of the `Marinade Finance` program",
                  "content": [
                    "#[derive(Clone, Debug, AnchorSerialize, AnchorDeserialize)]",
                    "pub struct InitializeData {",
                    "  pub admin_authority: Pubkey,",
                    "  pub validator_manager_authority: Pubkey,",
                    "  pub min_stake: u64,",
                    "  pub reward_fee: Fee,",
                    "  pub liq_pool: LiqPoolInitializeData,",
                    "  pub additional_stake_record_space: u32,",
                    "  pub additional_validator_record_space: u32,",
                    "  pub slots_for_stake_delta: u64,",
                    "}",
                    ""
                  ],
                  "label": "Marinade Finance's Type InitializeData",
                  "type": 2,
                  "children": [],
                  "parentId": 22,
                  "id": 88
                },
                {
                  "requires": [],
                  "description": "Generates the type `LiqPoolInitializeData` of the `Marinade Finance` program",
                  "content": [
                    "#[derive(Clone, Debug, AnchorSerialize, AnchorDeserialize)]",
                    "pub struct LiqPoolInitializeData {",
                    "  pub lp_liquidity_target: u64,",
                    "  pub lp_max_fee: Fee,",
                    "  pub lp_min_fee: Fee,",
                    "  pub lp_treasury_cut: Fee,",
                    "}",
                    ""
                  ],
                  "label": "Marinade Finance's Type LiqPoolInitializeData",
                  "type": 2,
                  "children": [],
                  "parentId": 22,
                  "id": 89
                },
                {
                  "requires": [],
                  "description": "Generates the type `ChangeAuthorityData` of the `Marinade Finance` program",
                  "content": [
                    "#[derive(Clone, Debug, AnchorSerialize, AnchorDeserialize)]",
                    "pub struct ChangeAuthorityData {",
                    "  pub admin: Option<Pubkey>,",
                    "  pub validator_manager: Option<Pubkey>,",
                    "  pub operational_sol_account: Option<Pubkey>,",
                    "  pub treasury_msol_account: Option<Pubkey>,",
                    "}",
                    ""
                  ],
                  "label": "Marinade Finance's Type ChangeAuthorityData",
                  "type": 2,
                  "children": [],
                  "parentId": 22,
                  "id": 90
                },
                {
                  "requires": [],
                  "description": "Generates the type `ConfigLpParams` of the `Marinade Finance` program",
                  "content": [
                    "#[derive(Clone, Debug, AnchorSerialize, AnchorDeserialize)]",
                    "pub struct ConfigLpParams {",
                    "  pub min_fee: Option<Fee>,",
                    "  pub max_fee: Option<Fee>,",
                    "  pub liquidity_target: Option<u64>,",
                    "  pub treasury_cut: Option<Fee>,",
                    "}",
                    ""
                  ],
                  "label": "Marinade Finance's Type ConfigLpParams",
                  "type": 2,
                  "children": [],
                  "parentId": 22,
                  "id": 91
                },
                {
                  "requires": [],
                  "description": "Generates the type `ConfigMarinadeParams` of the `Marinade Finance` program",
                  "content": [
                    "#[derive(Clone, Debug, AnchorSerialize, AnchorDeserialize)]",
                    "pub struct ConfigMarinadeParams {",
                    "  pub rewards_fee: Option<Fee>,",
                    "  pub slots_for_stake_delta: Option<u64>,",
                    "  pub min_stake: Option<u64>,",
                    "  pub min_deposit: Option<u64>,",
                    "  pub min_withdraw: Option<u64>,",
                    "  pub staking_sol_cap: Option<u64>,",
                    "  pub liquidity_sol_cap: Option<u64>,",
                    "  pub auto_add_validator_enabled: Option<bool>,",
                    "}",
                    ""
                  ],
                  "label": "Marinade Finance's Type ConfigMarinadeParams",
                  "type": 2,
                  "children": [],
                  "parentId": 22,
                  "id": 92
                },
                {
                  "requires": [],
                  "description": "Generates the type `LiqPool` of the `Marinade Finance` program",
                  "content": [
                    "#[derive(Clone, Debug, AnchorSerialize, AnchorDeserialize)]",
                    "pub struct LiqPool {",
                    "  pub lp_mint: Pubkey,",
                    "  pub lp_mint_authority_bump_seed: u8,",
                    "  pub sol_leg_bump_seed: u8,",
                    "  pub msol_leg_authority_bump_seed: u8,",
                    "  pub msol_leg: Pubkey,",
                    "  pub lp_liquidity_target: u64,",
                    "  pub lp_max_fee: Fee,",
                    "  pub lp_min_fee: Fee,",
                    "  pub treasury_cut: Fee,",
                    "  pub lp_supply: u64,",
                    "  pub lent_from_sol_leg: u64,",
                    "  pub liquidity_sol_cap: u64,",
                    "}",
                    ""
                  ],
                  "label": "Marinade Finance's Type LiqPool",
                  "type": 2,
                  "children": [],
                  "parentId": 22,
                  "id": 93
                },
                {
                  "requires": [],
                  "description": "Generates the type `List` of the `Marinade Finance` program",
                  "content": [
                    "#[derive(Clone, Debug, AnchorSerialize, AnchorDeserialize)]",
                    "pub struct List {",
                    "  pub account: Pubkey,",
                    "  pub item_size: u32,",
                    "  pub count: u32,",
                    "  pub new_account: Pubkey,",
                    "  pub copied_count: u32,",
                    "}",
                    ""
                  ],
                  "label": "Marinade Finance's Type List",
                  "type": 2,
                  "children": [],
                  "parentId": 22,
                  "id": 94
                },
                {
                  "requires": [],
                  "description": "Generates the type `StakeRecord` of the `Marinade Finance` program",
                  "content": [
                    "#[derive(Clone, Debug, AnchorSerialize, AnchorDeserialize)]",
                    "pub struct StakeRecord {",
                    "  pub stake_account: Pubkey,",
                    "  pub last_update_delegated_lamports: u64,",
                    "  pub last_update_epoch: u64,",
                    "  pub is_emergency_unstaking: u8,",
                    "}",
                    ""
                  ],
                  "label": "Marinade Finance's Type StakeRecord",
                  "type": 2,
                  "children": [],
                  "parentId": 22,
                  "id": 95
                },
                {
                  "requires": [],
                  "description": "Generates the type `StakeSystem` of the `Marinade Finance` program",
                  "content": [
                    "#[derive(Clone, Debug, AnchorSerialize, AnchorDeserialize)]",
                    "pub struct StakeSystem {",
                    "  pub stake_list: List,",
                    "  pub delayed_unstake_cooling_down: u64,",
                    "  pub stake_deposit_bump_seed: u8,",
                    "  pub stake_withdraw_bump_seed: u8,",
                    "  pub slots_for_stake_delta: u64,",
                    "  pub last_stake_delta_epoch: u64,",
                    "  pub min_stake: u64,",
                    "  pub extra_stake_delta_runs: u32,",
                    "}",
                    ""
                  ],
                  "label": "Marinade Finance's Type StakeSystem",
                  "type": 2,
                  "children": [],
                  "parentId": 22,
                  "id": 96
                },
                {
                  "requires": [],
                  "description": "Generates the type `ValidatorRecord` of the `Marinade Finance` program",
                  "content": [
                    "#[derive(Clone, Debug, AnchorSerialize, AnchorDeserialize)]",
                    "pub struct ValidatorRecord {",
                    "  pub validator_account: Pubkey,",
                    "  pub active_balance: u64,",
                    "  pub score: u32,",
                    "  pub last_stake_delta_epoch: u64,",
                    "  pub duplication_flag_bump_seed: u8,",
                    "}",
                    ""
                  ],
                  "label": "Marinade Finance's Type ValidatorRecord",
                  "type": 2,
                  "children": [],
                  "parentId": 22,
                  "id": 97
                },
                {
                  "requires": [],
                  "description": "Generates the type `ValidatorSystem` of the `Marinade Finance` program",
                  "content": [
                    "#[derive(Clone, Debug, AnchorSerialize, AnchorDeserialize)]",
                    "pub struct ValidatorSystem {",
                    "  pub validator_list: List,",
                    "  pub manager_authority: Pubkey,",
                    "  pub total_validator_score: u32,",
                    "  pub total_active_balance: u64,",
                    "  pub auto_add_validator_enabled: u8,",
                    "}",
                    ""
                  ],
                  "label": "Marinade Finance's Type ValidatorSystem",
                  "type": 2,
                  "children": [],
                  "parentId": 22,
                  "id": 98
                },
                {
                  "requires": [],
                  "description": "Creates the interface of the `Marinade Finance` program",
                  "content": [
                    "use anchor_lang::prelude::*;",
                    "",
                    "declare_id!(\"MarBmsSgKXdrN1egZf5sqe1TMai9K1rChYNDJgjq7aD\");",
                    "",
                    "#[derive(Accounts)]",
                    "pub struct LiqPoolInitialize<'info> {",
                    "  pub lp_mint: AccountInfo<'info>,",
                    "  pub sol_leg_pda: AccountInfo<'info>,",
                    "  pub msol_leg: AccountInfo<'info>,",
                    "}",
                    "",
                    "#[derive(Accounts)]",
                    "pub struct Initialize<'info> {",
                    "  #[account(signer)]",
                    "  pub creator_authority: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub state: AccountInfo<'info>,",
                    "  pub reserve_pda: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub stake_list: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub validator_list: AccountInfo<'info>,",
                    "  pub msol_mint: AccountInfo<'info>,",
                    "  pub operational_sol_account: AccountInfo<'info>,",
                    "  pub liq_pool_initialize: LiqPoolInitialize<'info>,",
                    "  pub treasury_msol_account: AccountInfo<'info>,",
                    "  pub clock: AccountInfo<'info>,",
                    "  pub rent: AccountInfo<'info>,",
                    "}",
                    "",
                    "#[derive(Accounts)]",
                    "pub struct ChangeAuthority<'info> {",
                    "  #[account(mut)]",
                    "  pub state: AccountInfo<'info>,",
                    "  #[account(signer)]",
                    "  pub admin_authority: AccountInfo<'info>,",
                    "}",
                    "",
                    "#[derive(Accounts)]",
                    "pub struct AddValidator<'info> {",
                    "  #[account(mut)]",
                    "  pub state: AccountInfo<'info>,",
                    "  #[account(signer)]",
                    "  pub manager_authority: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub validator_list: AccountInfo<'info>,",
                    "  pub validator_vote: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub duplication_flag: AccountInfo<'info>,",
                    "  #[account(mut, signer)]",
                    "  pub rent_payer: AccountInfo<'info>,",
                    "  pub clock: AccountInfo<'info>,",
                    "  pub rent: AccountInfo<'info>,",
                    "  pub system_program: AccountInfo<'info>,",
                    "}",
                    "",
                    "#[derive(Accounts)]",
                    "pub struct RemoveValidator<'info> {",
                    "  #[account(mut)]",
                    "  pub state: AccountInfo<'info>,",
                    "  #[account(signer)]",
                    "  pub manager_authority: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub validator_list: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub duplication_flag: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub operational_sol_account: AccountInfo<'info>,",
                    "}",
                    "",
                    "#[derive(Accounts)]",
                    "pub struct SetValidatorScore<'info> {",
                    "  #[account(mut)]",
                    "  pub state: AccountInfo<'info>,",
                    "  #[account(signer)]",
                    "  pub manager_authority: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub validator_list: AccountInfo<'info>,",
                    "}",
                    "",
                    "#[derive(Accounts)]",
                    "pub struct ConfigValidatorSystem<'info> {",
                    "  #[account(mut)]",
                    "  pub state: AccountInfo<'info>,",
                    "  #[account(signer)]",
                    "  pub manager_authority: AccountInfo<'info>,",
                    "}",
                    "",
                    "#[derive(Accounts)]",
                    "pub struct Deposit<'info> {",
                    "  #[account(mut)]",
                    "  pub state: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub msol_mint: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub liq_pool_sol_leg_pda: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub liq_pool_msol_leg: AccountInfo<'info>,",
                    "  pub liq_pool_msol_leg_authority: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub reserve_pda: AccountInfo<'info>,",
                    "  #[account(mut, signer)]",
                    "  pub transfer_from: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub mint_to: AccountInfo<'info>,",
                    "  pub msol_mint_authority: AccountInfo<'info>,",
                    "  pub system_program: AccountInfo<'info>,",
                    "  pub token_program: AccountInfo<'info>,",
                    "}",
                    "",
                    "#[derive(Accounts)]",
                    "pub struct DepositStakeAccount<'info> {",
                    "  #[account(mut)]",
                    "  pub state: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub validator_list: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub stake_list: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub stake_account: AccountInfo<'info>,",
                    "  #[account(signer)]",
                    "  pub stake_authority: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub duplication_flag: AccountInfo<'info>,",
                    "  #[account(mut, signer)]",
                    "  pub rent_payer: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub msol_mint: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub mint_to: AccountInfo<'info>,",
                    "  pub msol_mint_authority: AccountInfo<'info>,",
                    "  pub clock: AccountInfo<'info>,",
                    "  pub rent: AccountInfo<'info>,",
                    "  pub system_program: AccountInfo<'info>,",
                    "  pub token_program: AccountInfo<'info>,",
                    "  pub stake_program: AccountInfo<'info>,",
                    "}",
                    "",
                    "#[derive(Accounts)]",
                    "pub struct LiquidUnstake<'info> {",
                    "  #[account(mut)]",
                    "  pub state: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub msol_mint: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub liq_pool_sol_leg_pda: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub liq_pool_msol_leg: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub treasury_msol_account: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub get_msol_from: AccountInfo<'info>,",
                    "  #[account(signer)]",
                    "  pub get_msol_from_authority: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub transfer_sol_to: AccountInfo<'info>,",
                    "  pub system_program: AccountInfo<'info>,",
                    "  pub token_program: AccountInfo<'info>,",
                    "}",
                    "",
                    "#[derive(Accounts)]",
                    "pub struct AddLiquidity<'info> {",
                    "  #[account(mut)]",
                    "  pub state: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub lp_mint: AccountInfo<'info>,",
                    "  pub lp_mint_authority: AccountInfo<'info>,",
                    "  pub liq_pool_msol_leg: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub liq_pool_sol_leg_pda: AccountInfo<'info>,",
                    "  #[account(mut, signer)]",
                    "  pub transfer_from: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub mint_to: AccountInfo<'info>,",
                    "  pub system_program: AccountInfo<'info>,",
                    "  pub token_program: AccountInfo<'info>,",
                    "}",
                    "",
                    "#[derive(Accounts)]",
                    "pub struct RemoveLiquidity<'info> {",
                    "  #[account(mut)]",
                    "  pub state: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub lp_mint: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub burn_from: AccountInfo<'info>,",
                    "  #[account(signer)]",
                    "  pub burn_from_authority: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub transfer_sol_to: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub transfer_msol_to: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub liq_pool_sol_leg_pda: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub liq_pool_msol_leg: AccountInfo<'info>,",
                    "  pub liq_pool_msol_leg_authority: AccountInfo<'info>,",
                    "  pub system_program: AccountInfo<'info>,",
                    "  pub token_program: AccountInfo<'info>,",
                    "}",
                    "",
                    "#[derive(Accounts)]",
                    "pub struct ConfigLp<'info> {",
                    "  #[account(mut)]",
                    "  pub state: AccountInfo<'info>,",
                    "  #[account(signer)]",
                    "  pub admin_authority: AccountInfo<'info>,",
                    "}",
                    "",
                    "#[derive(Accounts)]",
                    "pub struct ConfigMarinade<'info> {",
                    "  #[account(mut)]",
                    "  pub state: AccountInfo<'info>,",
                    "  #[account(signer)]",
                    "  pub admin_authority: AccountInfo<'info>,",
                    "}",
                    "",
                    "#[derive(Accounts)]",
                    "pub struct OrderUnstake<'info> {",
                    "  #[account(mut)]",
                    "  pub state: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub msol_mint: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub burn_msol_from: AccountInfo<'info>,",
                    "  #[account(signer)]",
                    "  pub burn_msol_authority: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub new_ticket_account: AccountInfo<'info>,",
                    "  pub clock: AccountInfo<'info>,",
                    "  pub rent: AccountInfo<'info>,",
                    "  pub token_program: AccountInfo<'info>,",
                    "}",
                    "",
                    "#[derive(Accounts)]",
                    "pub struct Claim<'info> {",
                    "  #[account(mut)]",
                    "  pub state: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub reserve_pda: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub ticket_account: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub transfer_sol_to: AccountInfo<'info>,",
                    "  pub clock: AccountInfo<'info>,",
                    "  pub system_program: AccountInfo<'info>,",
                    "}",
                    "",
                    "#[derive(Accounts)]",
                    "pub struct StakeReserve<'info> {",
                    "  #[account(mut)]",
                    "  pub state: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub validator_list: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub stake_list: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub validator_vote: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub reserve_pda: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub stake_account: AccountInfo<'info>,",
                    "  pub stake_deposit_authority: AccountInfo<'info>,",
                    "  pub clock: AccountInfo<'info>,",
                    "  pub epoch_schedule: AccountInfo<'info>,",
                    "  pub rent: AccountInfo<'info>,",
                    "  pub stake_history: AccountInfo<'info>,",
                    "  pub stake_config: AccountInfo<'info>,",
                    "  pub system_program: AccountInfo<'info>,",
                    "  pub stake_program: AccountInfo<'info>,",
                    "}",
                    "",
                    "#[derive(Accounts)]",
                    "pub struct CommonUpdateActive<'info> {",
                    "  #[account(mut)]",
                    "  pub state: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub stake_list: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub stake_account: AccountInfo<'info>,",
                    "  pub stake_withdraw_authority: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub reserve_pda: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub msol_mint: AccountInfo<'info>,",
                    "  pub msol_mint_authority: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub treasury_msol_account: AccountInfo<'info>,",
                    "  pub clock: AccountInfo<'info>,",
                    "  pub stake_history: AccountInfo<'info>,",
                    "  pub stake_program: AccountInfo<'info>,",
                    "  pub token_program: AccountInfo<'info>,",
                    "}",
                    "",
                    "#[derive(Accounts)]",
                    "pub struct UpdateActive<'info> {",
                    "  pub common_update_active: CommonUpdateActive<'info>,",
                    "  #[account(mut)]",
                    "  pub validator_list: AccountInfo<'info>,",
                    "}",
                    "",
                    "#[derive(Accounts)]",
                    "pub struct CommonUpdateDeactivated<'info> {",
                    "  #[account(mut)]",
                    "  pub state: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub stake_list: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub stake_account: AccountInfo<'info>,",
                    "  pub stake_withdraw_authority: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub reserve_pda: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub msol_mint: AccountInfo<'info>,",
                    "  pub msol_mint_authority: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub treasury_msol_account: AccountInfo<'info>,",
                    "  pub clock: AccountInfo<'info>,",
                    "  pub stake_history: AccountInfo<'info>,",
                    "  pub stake_program: AccountInfo<'info>,",
                    "  pub token_program: AccountInfo<'info>,",
                    "}",
                    "",
                    "#[derive(Accounts)]",
                    "pub struct UpdateDeactivated<'info> {",
                    "  pub common_update_deactivated: CommonUpdateDeactivated<'info>,",
                    "  #[account(mut)]",
                    "  pub operational_sol_account: AccountInfo<'info>,",
                    "  pub system_program: AccountInfo<'info>,",
                    "}",
                    "",
                    "#[derive(Accounts)]",
                    "pub struct DeactivateStake<'info> {",
                    "  #[account(mut)]",
                    "  pub state: AccountInfo<'info>,",
                    "  pub reserve_pda: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub validator_list: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub stake_list: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub stake_account: AccountInfo<'info>,",
                    "  pub stake_deposit_authority: AccountInfo<'info>,",
                    "  #[account(mut, signer)]",
                    "  pub split_stake_account: AccountInfo<'info>,",
                    "  #[account(mut, signer)]",
                    "  pub split_stake_rent_payer: AccountInfo<'info>,",
                    "  pub clock: AccountInfo<'info>,",
                    "  pub rent: AccountInfo<'info>,",
                    "  pub epoch_schedule: AccountInfo<'info>,",
                    "  pub stake_history: AccountInfo<'info>,",
                    "  pub system_program: AccountInfo<'info>,",
                    "  pub stake_program: AccountInfo<'info>,",
                    "}",
                    "",
                    "#[derive(Accounts)]",
                    "pub struct EmergencyUnstake<'info> {",
                    "  #[account(mut)]",
                    "  pub state: AccountInfo<'info>,",
                    "  #[account(signer)]",
                    "  pub validator_manager_authority: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub validator_list: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub stake_list: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub stake_account: AccountInfo<'info>,",
                    "  pub stake_deposit_authority: AccountInfo<'info>,",
                    "  pub clock: AccountInfo<'info>,",
                    "  pub stake_program: AccountInfo<'info>,",
                    "}",
                    "",
                    "#[derive(Accounts)]",
                    "pub struct PartialUnstake<'info> {",
                    "  #[account(mut)]",
                    "  pub state: AccountInfo<'info>,",
                    "  #[account(signer)]",
                    "  pub validator_manager_authority: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub validator_list: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub stake_list: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub stake_account: AccountInfo<'info>,",
                    "  pub stake_deposit_authority: AccountInfo<'info>,",
                    "  pub reserve_pda: AccountInfo<'info>,",
                    "  #[account(mut, signer)]",
                    "  pub split_stake_account: AccountInfo<'info>,",
                    "  #[account(mut, signer)]",
                    "  pub split_stake_rent_payer: AccountInfo<'info>,",
                    "  pub clock: AccountInfo<'info>,",
                    "  pub rent: AccountInfo<'info>,",
                    "  pub stake_history: AccountInfo<'info>,",
                    "  pub system_program: AccountInfo<'info>,",
                    "  pub stake_program: AccountInfo<'info>,",
                    "}",
                    "",
                    "#[derive(Accounts)]",
                    "pub struct MergeStakes<'info> {",
                    "  #[account(mut)]",
                    "  pub state: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub stake_list: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub validator_list: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub destination_stake: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub source_stake: AccountInfo<'info>,",
                    "  pub stake_deposit_authority: AccountInfo<'info>,",
                    "  pub stake_withdraw_authority: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub operational_sol_account: AccountInfo<'info>,",
                    "  pub clock: AccountInfo<'info>,",
                    "  pub stake_history: AccountInfo<'info>,",
                    "  pub stake_program: AccountInfo<'info>,",
                    "}",
                    "",
                    "#[account]",
                    "pub struct State {",
                    "  pub msol_mint: Pubkey,",
                    "  pub admin_authority: Pubkey,",
                    "  pub operational_sol_account: Pubkey,",
                    "  pub treasury_msol_account: Pubkey,",
                    "  pub reserve_bump_seed: u8,",
                    "  pub msol_mint_authority_bump_seed: u8,",
                    "  pub rent_exempt_for_token_acc: u64,",
                    "  pub reward_fee: Fee,",
                    "  pub stake_system: StakeSystem,",
                    "  pub validator_system: ValidatorSystem,",
                    "  pub liq_pool: LiqPool,",
                    "  pub available_reserve_balance: u64,",
                    "  pub msol_supply: u64,",
                    "  pub msol_price: u64,",
                    "  pub circulating_ticket_count: u64,",
                    "  pub circulating_ticket_balance: u64,",
                    "  pub lent_from_reserve: u64,",
                    "  pub min_deposit: u64,",
                    "  pub min_withdraw: u64,",
                    "  pub staking_sol_cap: u64,",
                    "  pub emergency_cooling_down: u64,",
                    "}",
                    "",
                    "#[account]",
                    "pub struct TicketAccountData {",
                    "  pub state_address: Pubkey,",
                    "  pub beneficiary: Pubkey,",
                    "  pub lamports_amount: u64,",
                    "  pub created_epoch: u64,",
                    "}",
                    "",
                    "#[derive(Clone, Debug, AnchorSerialize, AnchorDeserialize)]",
                    "pub struct Fee {",
                    "  pub basis_points: u32,",
                    "}",
                    "",
                    "#[derive(Clone, Debug, AnchorSerialize, AnchorDeserialize)]",
                    "pub struct InitializeData {",
                    "  pub admin_authority: Pubkey,",
                    "  pub validator_manager_authority: Pubkey,",
                    "  pub min_stake: u64,",
                    "  pub reward_fee: Fee,",
                    "  pub liq_pool: LiqPoolInitializeData,",
                    "  pub additional_stake_record_space: u32,",
                    "  pub additional_validator_record_space: u32,",
                    "  pub slots_for_stake_delta: u64,",
                    "}",
                    "",
                    "#[derive(Clone, Debug, AnchorSerialize, AnchorDeserialize)]",
                    "pub struct LiqPoolInitializeData {",
                    "  pub lp_liquidity_target: u64,",
                    "  pub lp_max_fee: Fee,",
                    "  pub lp_min_fee: Fee,",
                    "  pub lp_treasury_cut: Fee,",
                    "}",
                    "",
                    "#[derive(Clone, Debug, AnchorSerialize, AnchorDeserialize)]",
                    "pub struct ChangeAuthorityData {",
                    "  pub admin: Option<Pubkey>,",
                    "  pub validator_manager: Option<Pubkey>,",
                    "  pub operational_sol_account: Option<Pubkey>,",
                    "  pub treasury_msol_account: Option<Pubkey>,",
                    "}",
                    "",
                    "#[derive(Clone, Debug, AnchorSerialize, AnchorDeserialize)]",
                    "pub struct ConfigLpParams {",
                    "  pub min_fee: Option<Fee>,",
                    "  pub max_fee: Option<Fee>,",
                    "  pub liquidity_target: Option<u64>,",
                    "  pub treasury_cut: Option<Fee>,",
                    "}",
                    "",
                    "#[derive(Clone, Debug, AnchorSerialize, AnchorDeserialize)]",
                    "pub struct ConfigMarinadeParams {",
                    "  pub rewards_fee: Option<Fee>,",
                    "  pub slots_for_stake_delta: Option<u64>,",
                    "  pub min_stake: Option<u64>,",
                    "  pub min_deposit: Option<u64>,",
                    "  pub min_withdraw: Option<u64>,",
                    "  pub staking_sol_cap: Option<u64>,",
                    "  pub liquidity_sol_cap: Option<u64>,",
                    "  pub auto_add_validator_enabled: Option<bool>,",
                    "}",
                    "",
                    "#[derive(Clone, Debug, AnchorSerialize, AnchorDeserialize)]",
                    "pub struct LiqPool {",
                    "  pub lp_mint: Pubkey,",
                    "  pub lp_mint_authority_bump_seed: u8,",
                    "  pub sol_leg_bump_seed: u8,",
                    "  pub msol_leg_authority_bump_seed: u8,",
                    "  pub msol_leg: Pubkey,",
                    "  pub lp_liquidity_target: u64,",
                    "  pub lp_max_fee: Fee,",
                    "  pub lp_min_fee: Fee,",
                    "  pub treasury_cut: Fee,",
                    "  pub lp_supply: u64,",
                    "  pub lent_from_sol_leg: u64,",
                    "  pub liquidity_sol_cap: u64,",
                    "}",
                    "",
                    "#[derive(Clone, Debug, AnchorSerialize, AnchorDeserialize)]",
                    "pub struct List {",
                    "  pub account: Pubkey,",
                    "  pub item_size: u32,",
                    "  pub count: u32,",
                    "  pub new_account: Pubkey,",
                    "  pub copied_count: u32,",
                    "}",
                    "",
                    "#[derive(Clone, Debug, AnchorSerialize, AnchorDeserialize)]",
                    "pub struct StakeRecord {",
                    "  pub stake_account: Pubkey,",
                    "  pub last_update_delegated_lamports: u64,",
                    "  pub last_update_epoch: u64,",
                    "  pub is_emergency_unstaking: u8,",
                    "}",
                    "",
                    "#[derive(Clone, Debug, AnchorSerialize, AnchorDeserialize)]",
                    "pub struct StakeSystem {",
                    "  pub stake_list: List,",
                    "  pub delayed_unstake_cooling_down: u64,",
                    "  pub stake_deposit_bump_seed: u8,",
                    "  pub stake_withdraw_bump_seed: u8,",
                    "  pub slots_for_stake_delta: u64,",
                    "  pub last_stake_delta_epoch: u64,",
                    "  pub min_stake: u64,",
                    "  pub extra_stake_delta_runs: u32,",
                    "}",
                    "",
                    "#[derive(Clone, Debug, AnchorSerialize, AnchorDeserialize)]",
                    "pub struct ValidatorRecord {",
                    "  pub validator_account: Pubkey,",
                    "  pub active_balance: u64,",
                    "  pub score: u32,",
                    "  pub last_stake_delta_epoch: u64,",
                    "  pub duplication_flag_bump_seed: u8,",
                    "}",
                    "",
                    "#[derive(Clone, Debug, AnchorSerialize, AnchorDeserialize)]",
                    "pub struct ValidatorSystem {",
                    "  pub validator_list: List,",
                    "  pub manager_authority: Pubkey,",
                    "  pub total_validator_score: u32,",
                    "  pub total_active_balance: u64,",
                    "  pub auto_add_validator_enabled: u8,",
                    "}",
                    ""
                  ],
                  "label": "All Marinade Finance Interfaces",
                  "type": 2,
                  "children": [],
                  "parentId": 22,
                  "id": 99
                },
                {
                  "requires": [],
                  "description": "Creates the interface instruction `initializeEscrow` of the `Escrow` program",
                  "content": [
                    "#[derive(Accounts)]",
                    "pub struct InitializeEscrow<'info> {",
                    "  #[account(mut, signer)]",
                    "  pub initializer: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub initializer_deposit_token_account: AccountInfo<'info>,",
                    "  pub initializer_receive_token_account: AccountInfo<'info>,",
                    "  #[account(mut, signer)]",
                    "  pub escrow_account: AccountInfo<'info>,",
                    "  pub system_program: AccountInfo<'info>,",
                    "  pub token_program: AccountInfo<'info>,",
                    "}",
                    ""
                  ],
                  "label": "Escrow's Instruction InitializeEscrow",
                  "type": 2,
                  "children": [],
                  "parentId": 22,
                  "id": 100
                },
                {
                  "requires": [],
                  "description": "Creates the interface instruction `cancelEscrow` of the `Escrow` program",
                  "content": [
                    "#[derive(Accounts)]",
                    "pub struct CancelEscrow<'info> {",
                    "  pub initializer: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub pda_deposit_token_account: AccountInfo<'info>,",
                    "  pub pda_account: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub escrow_account: AccountInfo<'info>,",
                    "  pub token_program: AccountInfo<'info>,",
                    "}",
                    ""
                  ],
                  "label": "Escrow's Instruction CancelEscrow",
                  "type": 2,
                  "children": [],
                  "parentId": 22,
                  "id": 101
                },
                {
                  "requires": [],
                  "description": "Creates the interface instruction `exchange` of the `Escrow` program",
                  "content": [
                    "#[derive(Accounts)]",
                    "pub struct Exchange<'info> {",
                    "  #[account(signer)]",
                    "  pub taker: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub taker_deposit_token_account: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub taker_receive_token_account: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub pda_deposit_token_account: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub initializer_receive_token_account: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub initializer_main_account: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub escrow_account: AccountInfo<'info>,",
                    "  pub pda_account: AccountInfo<'info>,",
                    "  pub token_program: AccountInfo<'info>,",
                    "}",
                    ""
                  ],
                  "label": "Escrow's Instruction Exchange",
                  "type": 2,
                  "children": [],
                  "parentId": 22,
                  "id": 102
                },
                {
                  "requires": [],
                  "description": "Generates the account `EscrowAccount` of the `Escrow` program",
                  "content": [
                    "#[account]",
                    "pub struct EscrowAccount {",
                    "  pub initializer_key: Pubkey,",
                    "  pub initializer_deposit_token_account: Pubkey,",
                    "  pub initializer_receive_token_account: Pubkey,",
                    "  pub initializer_amount: u64,",
                    "  pub taker_amount: u64,",
                    "}",
                    ""
                  ],
                  "label": "Escrow's Account EscrowAccount",
                  "type": 2,
                  "children": [],
                  "parentId": 22,
                  "id": 103
                },
                {
                  "requires": [],
                  "description": "Creates the interface of the `Escrow` program",
                  "content": [
                    "use anchor_lang::prelude::*;",
                    "",
                    "declare_id!(\"Fg6PaFpoGXkYsidMpWTK6W2BeZ7FEfcYkg476zPFsLnP\");",
                    "",
                    "#[derive(Accounts)]",
                    "pub struct InitializeEscrow<'info> {",
                    "  #[account(mut, signer)]",
                    "  pub initializer: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub initializer_deposit_token_account: AccountInfo<'info>,",
                    "  pub initializer_receive_token_account: AccountInfo<'info>,",
                    "  #[account(mut, signer)]",
                    "  pub escrow_account: AccountInfo<'info>,",
                    "  pub system_program: AccountInfo<'info>,",
                    "  pub token_program: AccountInfo<'info>,",
                    "}",
                    "",
                    "#[derive(Accounts)]",
                    "pub struct CancelEscrow<'info> {",
                    "  pub initializer: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub pda_deposit_token_account: AccountInfo<'info>,",
                    "  pub pda_account: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub escrow_account: AccountInfo<'info>,",
                    "  pub token_program: AccountInfo<'info>,",
                    "}",
                    "",
                    "#[derive(Accounts)]",
                    "pub struct Exchange<'info> {",
                    "  #[account(signer)]",
                    "  pub taker: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub taker_deposit_token_account: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub taker_receive_token_account: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub pda_deposit_token_account: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub initializer_receive_token_account: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub initializer_main_account: AccountInfo<'info>,",
                    "  #[account(mut)]",
                    "  pub escrow_account: AccountInfo<'info>,",
                    "  pub pda_account: AccountInfo<'info>,",
                    "  pub token_program: AccountInfo<'info>,",
                    "}",
                    "",
                    "#[account]",
                    "pub struct EscrowAccount {",
                    "  pub initializer_key: Pubkey,",
                    "  pub initializer_deposit_token_account: Pubkey,",
                    "  pub initializer_receive_token_account: Pubkey,",
                    "  pub initializer_amount: u64,",
                    "  pub taker_amount: u64,",
                    "}",
                    ""
                  ],
                  "label": "All Escrow Interfaces",
                  "type": 2,
                  "children": [],
                  "parentId": 22,
                  "id": 104
                }
              ]
            }
          ]
        },
        {
          "id": 105,
          "parentId": 2,
          "type": 1,
          "label": "Client",
          "children": [
            {
              "id": 106,
              "parentId": 105,
              "type": 1,
              "label": "System",
              "children": [
                {
                  "requires": [
                    "solana_program::system_instruction",
                    "solana_program_test::ProgramTestContext",
                    "solana_program_test::BanksClientError",
                    "solana_sdk::signature::Keypair",
                    "solana_sdk::signer::Signer",
                    "solana_sdk::transaction::Transaction"
                  ],
                  "description": "Gets the keypair with funds",
                  "content": [
                    "let ${1:keypair} = Keypair::new();",
                    "let amount = 1_000_000_000;",
                    "",
                    "let tx = Transaction::new_signed_with_payer(",
                    "    &[system_instruction::transfer(",
                    "        &context.payer.pubkey(),",
                    "        &${1:keypair}.pubkey(),",
                    "        amount,",
                    "    )],",
                    "    Some(&context.payer.pubkey()),",
                    "    &[&context.payer],",
                    "    context.last_blockhash,",
                    ");",
                    "",
                    "context.banks_client.process_transaction(tx).await.unwrap();"
                  ],
                  "label": "Get Funded Keypair",
                  "type": 3,
                  "children": [],
                  "parentId": 106,
                  "id": 107
                },
                {
                  "requires": [
                    "solana_sdk::signature::Keypair"
                  ],
                  "description": "Clone a keypair",
                  "content": [
                    "let ${1:cloned_keypair} = Keypair::from_bytes(&keypair.to_bytes()).unwrap();"
                  ],
                  "label": "Clone Keypair",
                  "type": 3,
                  "children": [],
                  "parentId": 106,
                  "id": 108
                },
                {
                  "requires": [
                    "solana_program_test::ProgramTestContext",
                    "solana_program_test::BanksClientError",
                    "solana_sdk::pubkey::Pubkey",
                    "solana_sdk::signature::Keypair",
                    "solana_sdk::signer::Signer",
                    "solana_sdk::system_instruction",
                    "solana_sdk::transaction::Transaction"
                  ],
                  "description": "Creates an account of size len",
                  "content": [
                    "let rent = context.banks_client.get_rent().await.unwrap();",
                    "let lamports = rent.minimum_balance(${1:len});",
                    "",
                    "let tx = Transaction::new_signed_with_payer(",
                    "    &[system_instruction::create_account(",
                    "        &context.payer.pubkey(),",
                    "        &${2:account}.pubkey(),",
                    "        lamports,",
                    "        ${1:len} as u64,",
                    "        ${3:owner},",
                    "    )],",
                    "    Some(&context.payer.pubkey()),",
                    "    &[&context.payer, &${2:account}],",
                    "    context.last_blockhash,",
                    ");",
                    "",
                    "context.banks_client.process_transaction(tx).await.unwrap();"
                  ],
                  "label": "Create Account",
                  "type": 3,
                  "children": [],
                  "parentId": 106,
                  "id": 109
                },
                {
                  "requires": [
                    "solana_program_test::ProgramTestContext",
                    "solana_sdk::pubkey::Pubkey",
                    "solana_sdk::account::Account"
                  ],
                  "description": "Gets the data of an account",
                  "content": [
                    "let ${1:account_data} = context",
                    "    .banks_client",
                    "    .get_account(*${2:pubkey})",
                    "    .await",
                    "    .expect(\"account not found\")",
                    "    .expect(\"account empty\");"
                  ],
                  "label": "Get Account Data",
                  "type": 3,
                  "children": [],
                  "parentId": 106,
                  "id": 110
                },
                {
                  "requires": [
                    "solana_program_test::ProgramTestContext",
                    "solana_program_test::BanksClientError",
                    "solana_sdk::pubkey::Pubkey",
                    "solana_sdk::signer::Signer",
                    "solana_sdk::system_instruction",
                    "solana_sdk::transaction::Transaction"
                  ],
                  "description": "Airdrop an account",
                  "content": [
                    "let tx = Transaction::new_signed_with_payer(",
                    "    &[system_instruction::transfer(",
                    "        &context.payer.pubkey(),",
                    "        ${1:receiver},",
                    "        ${2:amount},",
                    "    )],",
                    "    Some(&context.payer.pubkey()),",
                    "    &[&context.payer],",
                    "    context.last_blockhash,",
                    ");",
                    "",
                    "context.banks_client.process_transaction(tx).await.unwrap();"
                  ],
                  "label": "Airdrop",
                  "type": 3,
                  "children": [],
                  "parentId": 106,
                  "id": 111
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}